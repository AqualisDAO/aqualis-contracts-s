{
  "address": "0x7fd806049608b7d04076b8187dd773343e0589e6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BRIDGEMANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenIDs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "result",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasUnderlying",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUnderlying",
              "type": "bool"
            }
          ],
          "internalType": "struct BridgeConfig.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasUnderlying",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUnderlying",
              "type": "bool"
            }
          ],
          "internalType": "struct BridgeConfig.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        }
      ],
      "name": "getTokenID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        }
      ],
      "name": "getUnderlyingToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "tokenDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSwapFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasUnderlying",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isUnderlying",
              "type": "bool"
            }
          ],
          "internalType": "struct BridgeConfig.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        }
      ],
      "name": "hasUnderlyingToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        }
      ],
      "name": "isTokenIDExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenID",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maxSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSwapFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasUnderlying",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isUnderlying",
          "type": "bool"
        }
      ],
      "name": "setTokenConfig",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd88a9d5c13ad9f7cfaa50617e6aab40d655211406842b17fab0f819bf9359236",
  "receipt": {
    "to": null,
    "from": "0x235af07e770f474d24f5bf73074735892371b40d",
    "contractAddress": "0x7fd806049608b7d04076b8187dd773343e0589e6",
    "transactionIndex": "0x24",
    "gasUsed": "0x1aaa3d",
    "logsBloom": "0x
    "blockHash": "0x3b4ef00c314f41a9d23030de4c6e72971ebc929f7a07161d4a8d8905e63b4c34",
    "transactionHash": "0xde73c7f1b667aa22b5984ca35017554b28569749b5015052e495b98a19eb687e",
    "logs": [
      {
        "address": "0x7fd806049608b7d04076b8187dd773343e0589e6",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000235af07e770f474d24f5bf73074735892371b40d",
          "0x000000000000000000000000235af07e770f474d24f5bf73074735892371b40d"
        ],
        "data": "0x",
        "blockNumber": "0xc6dda6",
        "transactionHash": "0xde73c7f1b667aa22b5984ca35017554b28569749b5015052e495b98a19eb687e",
        "transactionIndex": "0x24",
        "blockHash": "0x3b4ef00c314f41a9d23030de4c6e72971ebc929f7a07161d4a8d8905e63b4c34",
        "logIndex": "0x57",
        "removed": false
      }
    ],
    "blockNumber": "0xc6dda6",
    "cumulativeGasUsed": "0x566165",
    "status": "0x1"
  },
  "args": [],
  "solcInputHash": "93aac212556138477183b84b0e38d022",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGEMANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenIDs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"result\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeConfig.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeConfig.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"getTokenID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"}],\"name\":\"getUnderlyingToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"internalType\":\"struct BridgeConfig.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"}],\"name\":\"hasUnderlyingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"}],\"name\":\"isTokenIDExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSwapFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasUnderlying\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUnderlying\",\"type\":\"bool\"}],\"name\":\"setTokenConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateSwapFee(address,uint256,uint256)\":{\"details\":\"This means the fee should be calculated based on the chain that the nodes emit a tx on\",\"params\":{\"amount\":\"in native token decimals\",\"chainID\":\"destination chain ID to query the token config for\",\"tokenAddress\":\"address of the destination token to query token config for\"},\"returns\":{\"_0\":\"Fee calculated in token decimals\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getToken(address,uint256)\":{\"params\":{\"chainID\":\"Chain ID of which token to get config for\",\"tokenAddress\":\"Matches the token ID by using a combo of address + chain ID\"}},\"getToken(string,uint256)\":{\"params\":{\"chainID\":\"Chain ID of which token address + config to get\",\"tokenID\":\"String input of the token ID for the token\"}},\"getTokenID(address,uint256)\":{\"params\":{\"chainID\":\"chainID of which to get token ID for\",\"tokenAddress\":\"address of token to get ID for\"}},\"getUnderlyingToken(string)\":{\"params\":{\"tokenID\":\"string token ID\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"hasUnderlyingToken(string)\":{\"params\":{\"tokenID\":\"String to check if it is a withdraw/underlying token\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)\":{\"params\":{\"chainID\":\"chain ID to use for the token config object\",\"hasUnderlying\":\"bool which represents whether this is a global mint token or one to withdraw()\",\"isUnderlying\":\"bool which represents if this token is the one to withdraw on the given chain\",\"maxSwap\":\"maximum amount of token allowed to be transferred at once - in native token decimals\",\"maxSwapFee\":\"max swap fee to be charged - in native token decimals\",\"minSwap\":\"minimum amount of token needed to be transferred at once - in native token decimals\",\"minSwapFee\":\"min swap fee to be charged - in native token decimals - especially useful for mainnet ETH\",\"swapFee\":\"percent based swap fee -- 10e6 == 10bps\",\"tokenAddress\":\"token address of the token on the given chain\",\"tokenDecimals\":\"decimals of token \",\"tokenID\":\"string ID to set the token config object form\"}}},\"title\":\"BridgeConfig contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateSwapFee(address,uint256,uint256)\":{\"notice\":\"Calculates bridge swap fee based on the destination chain's token transfer.\"},\"getAllTokenIDs()\":{\"notice\":\"Returns a list of all existing token IDs converted to strings\"},\"getToken(address,uint256)\":{\"notice\":\"Returns token config struct, given an address and chainID\"},\"getToken(string,uint256)\":{\"notice\":\"Returns the full token config struct \"},\"getTokenID(address,uint256)\":{\"notice\":\"Returns the token ID (string) of the cross-chain token inputted\"},\"getUnderlyingToken(string)\":{\"notice\":\"Returns which token is the underlying token to withdraw\"},\"hasUnderlyingToken(string)\":{\"notice\":\"Returns true if the token has an underlying token -- meaning the token is deposited into the bridge\"},\"isTokenIDExist(string)\":{\"notice\":\"Public function returning if token ID exists given a string\"},\"setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)\":{\"notice\":\"Main write function of this contract - Handles creating the struct and passing it to the internal logic function\"}},\"notice\":\"This token is used for configuring different tokens on the bridge and mapping them across chains.*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/synapse/BridgeConfig.sol\":\"BridgeConfig\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/synapse/BridgeConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/access/AccessControl.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\n/**\\n * @title BridgeConfig contract\\n * @notice This token is used for configuring different tokens on the bridge and mapping them across chains.\\n**/\\n\\ncontract BridgeConfig is AccessControl {\\n    using SafeMath for uint256;\\n    bytes32 public constant BRIDGEMANAGER_ROLE = keccak256('BRIDGEMANAGER_ROLE');\\n    bytes32[] private _allTokenIDs;\\n    mapping(bytes32 => Token[]) private _allTokens; // key is tokenID\\n    mapping(uint256 => mapping(address => bytes32)) private _tokenIDMap; // key is chainID,tokenAddress\\n    mapping(bytes32 => mapping(uint256 => Token)) private _tokens; // key is tokenID,chainID\\n\\n    // the denominator used to calculate fees. For example, an\\n    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    // this struct must be initialized using setTokenConfig for each token that directly interacts with the bridge\\n    struct Token {\\n        uint256 chainId;\\n        address tokenAddress;\\n        uint8 tokenDecimals;\\n        uint256 maxSwap;\\n        uint256 minSwap;\\n        uint256 swapFee;\\n        uint256 maxSwapFee;\\n        uint256 minSwapFee;\\n        bool hasUnderlying;\\n        bool isUnderlying;\\n    }\\n\\n\\n    constructor() public {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns a list of all existing token IDs converted to strings\\n     */\\n    function getAllTokenIDs() public view returns (string[] memory result) {\\n        uint256 length = _allTokenIDs.length;\\n        result = new string[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            result[i] = bytes32ToString(_allTokenIDs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the token ID (string) of the cross-chain token inputted\\n     * @param tokenAddress address of token to get ID for\\n     * @param chainID chainID of which to get token ID for\\n     */\\n    function getTokenID(address tokenAddress, uint256 chainID) public view returns (string memory)  {\\n        return bytes32ToString(_tokenIDMap[chainID][tokenAddress]);\\n    }\\n\\n    /**\\n     * @notice Returns the full token config struct \\n     * @param tokenID String input of the token ID for the token\\n     * @param chainID Chain ID of which token address + config to get\\n     */\\n    function getToken(string calldata tokenID, uint256 chainID) public view returns (Token memory token) {\\n        return _tokens[stringToBytes32(tokenID)][chainID];\\n    }\\n\\n    /**\\n     * @notice Returns token config struct, given an address and chainID\\n     * @param tokenAddress Matches the token ID by using a combo of address + chain ID\\n     * @param chainID Chain ID of which token to get config for\\n     */\\n    function getToken(address tokenAddress, uint256 chainID) public view returns (Token memory token) {\\n        string memory tokenID = getTokenID(tokenAddress, chainID);\\n        return _tokens[stringToBytes32(tokenID)][chainID];\\n    }\\n\\n    /**\\n     * @notice Returns true if the token has an underlying token -- meaning the token is deposited into the bridge\\n     * @param tokenID String to check if it is a withdraw/underlying token\\n     */\\n    function hasUnderlyingToken(string calldata tokenID) public view returns (bool) {\\n        bytes32 bytesTokenID = stringToBytes32(tokenID);\\n        Token[] memory _mcTokens = _allTokens[bytesTokenID];\\n        for (uint256 i = 0; i < _mcTokens.length; ++i) {\\n            if (_mcTokens[i].hasUnderlying) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns which token is the underlying token to withdraw\\n     * @param tokenID string token ID\\n     */\\n    function getUnderlyingToken(string calldata tokenID) public view returns (Token memory token) {\\n        bytes32 bytesTokenID = stringToBytes32(tokenID);\\n        Token[] memory _mcTokens = _allTokens[bytesTokenID];\\n        for (uint256 i = 0; i < _mcTokens.length; ++i) {\\n            if (_mcTokens[i].isUnderlying) {\\n                return _mcTokens[i];\\n            }\\n        }\\n    }\\n    \\n    /**\\n     @notice Public function returning if token ID exists given a string\\n     */\\n    function isTokenIDExist(string calldata tokenID) public view returns (bool) {\\n        return _isTokenIDExist(stringToBytes32(tokenID));\\n    }\\n\\n    /**\\n     @notice Internal function returning if token ID exists given bytes32 version of the ID\\n     */\\n    function _isTokenIDExist(bytes32 tokenID) internal view returns(bool) {\\n        for (uint256 i = 0; i < _allTokenIDs.length; ++i) {\\n            if (_allTokenIDs[i] == tokenID) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Internal function which handles logic of setting token ID and dealing with mappings\\n     * @param tokenID bytes32 version of ID\\n     * @param chainID which chain to set the token config for\\n     * @param tokenToAdd Token object to set the mapping to\\n     */\\n    function _setTokenConfig(bytes32 tokenID, uint256 chainID, Token memory tokenToAdd) internal returns(bool) {\\n        _tokens[tokenID][chainID] = tokenToAdd;\\n         if (!_isTokenIDExist(tokenID)) {\\n            _allTokenIDs.push(tokenID);\\n        }\\n\\n        Token[] storage _mcTokens = _allTokens[tokenID];\\n        for (uint256 i = 0; i < _mcTokens.length; ++i) {\\n            if (_mcTokens[i].chainId == chainID) {\\n                address oldToken = _mcTokens[i].tokenAddress;\\n                if (tokenToAdd.tokenAddress != oldToken) {\\n                _mcTokens[i].tokenAddress = tokenToAdd.tokenAddress ;\\n                _tokenIDMap[chainID][oldToken] = keccak256('');\\n                _tokenIDMap[chainID][tokenToAdd.tokenAddress] = tokenID;\\n                }\\n            }\\n        }\\n        _mcTokens.push(tokenToAdd);\\n        _tokenIDMap[chainID][tokenToAdd.tokenAddress] = tokenID;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Main write function of this contract - Handles creating the struct and passing it to the internal logic function\\n     * @param tokenID string ID to set the token config object form\\n     * @param chainID chain ID to use for the token config object\\n     * @param tokenAddress token address of the token on the given chain\\n     * @param tokenDecimals decimals of token \\n     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals\\n     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals\\n     * @param swapFee percent based swap fee -- 10e6 == 10bps\\n     * @param maxSwapFee max swap fee to be charged - in native token decimals\\n     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH\\n     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()\\n     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain\\n     */\\n    function setTokenConfig(\\n        string calldata tokenID,\\n        uint256 chainID,\\n        address tokenAddress,\\n        uint8 tokenDecimals,\\n        uint256 maxSwap,\\n        uint256 minSwap,\\n        uint256 swapFee,\\n        uint256 maxSwapFee,\\n        uint256 minSwapFee,\\n        bool hasUnderlying,\\n        bool isUnderlying\\n    ) public returns (bool) {\\n        require(hasRole(BRIDGEMANAGER_ROLE, msg.sender));\\n        Token memory tokenToAdd;\\n        tokenToAdd.tokenAddress = tokenAddress;\\n        tokenToAdd.tokenDecimals = tokenDecimals;\\n        tokenToAdd.maxSwap = maxSwap;\\n        tokenToAdd.minSwap = minSwap;\\n        tokenToAdd.swapFee = swapFee;\\n        tokenToAdd.maxSwapFee = maxSwapFee;\\n        tokenToAdd.minSwapFee = minSwapFee;\\n        tokenToAdd.hasUnderlying = hasUnderlying;\\n        tokenToAdd.isUnderlying = isUnderlying;\\n\\n        return _setTokenConfig(stringToBytes32(tokenID), chainID, tokenToAdd);\\n    }\\n\\n    /** \\n     * @notice Calculates bridge swap fee based on the destination chain's token transfer.\\n     * @dev This means the fee should be calculated based on the chain that the nodes emit a tx on\\n     * @param tokenAddress address of the destination token to query token config for\\n     * @param chainID destination chain ID to query the token config for\\n     * @param amount in native token decimals\\n     * @return Fee calculated in token decimals\\n     */\\n    function calculateSwapFee(\\n        address tokenAddress,\\n        uint256 chainID,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        Token memory token = getToken(tokenAddress, chainID);\\n        uint256 calculatedSwapFee = amount.mul(token.swapFee).div(FEE_DENOMINATOR);\\n        if (calculatedSwapFee > token.minSwapFee && calculatedSwapFee < token.maxSwapFee) {\\n            return calculatedSwapFee;\\n        } else if (calculatedSwapFee > token.maxSwapFee) {\\n            return token.maxSwapFee;\\n        } else {\\n            return token.minSwapFee;\\n        }\\n    }\\n    \\n    function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\\n        assembly {\\n            result := mload(add(str, 32))\\n        }\\n    }\\n\\n    function bytes32ToString(bytes32 data) internal pure returns (string memory) {\\n        uint8 i = 0;\\n        while (i < 32 && data[i] != 0) {\\n            ++i;\\n        }\\n        bytes memory bs = new bytes(i);\\n        for (uint8 j = 0; j < i; ++j) {\\n            bs[j] = data[j];\\n        }\\n        return string(bs);\\n    }\\n}\",\"keccak256\":\"0x793ac6987570600d170a0496409adb973c9d6e0fe5e05610f807ab9aec124c14\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001f60003362000025565b62000139565b62000031828262000035565b5050565b6000828152602081815260409091206200005a91839062000caa620000ae821b17901c565b1562000031576200006a620000ce565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620000c5836001600160a01b038416620000d2565b90505b92915050565b3390565b6000620000e0838362000121565b6200011857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620000c8565b506000620000c8565b60009081526001919091016020526040902054151590565b611d6c80620001496000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c8063684a10b3116100b2578063af611ca011610081578063d547741f11610066578063d547741f1461029b578063fc7cc4cb146102ae578063ff9106c7146102c157610136565b8063af611ca014610275578063ca15c8731461028857610136565b8063684a10b3146102255780639010d07c1461023a57806391d148541461025a578063a217fddf1461026d57610136565b806336568abe1161010957806343d7cce6116100ee57806343d7cce6146101ec57806358dfe6f1146101ff57806359053bfe1461021257610136565b806336568abe146101b95780633cc1c7e0146101cc57610136565b8063074b7e971461013b578063248a9ca3146101645780632f2ff15d14610184578063324980b514610199575b600080fd5b61014e6101493660046117f4565b6102c9565b60405161015b9190611a75565b60405180910390f35b610177610172366004611774565b61045b565b60405161015b9190611a80565b61019761019236600461178c565b610473565b005b6101ac6101a7366004611834565b6104de565b60405161015b9190611ca4565b6101976101c736600461178c565b6105f5565b6101df6101da366004611717565b61066b565b60405161015b9190611a89565b6101ac6101fa366004611717565b6106a7565b6101ac61020d3660046117f4565b610796565b61014e61022036600461187e565b61093c565b61022d610a72565b60405161015b91906119f7565b61024d6102483660046117d3565b610b15565b60405161015b91906119d6565b61014e61026836600461178c565b610b2d565b610177610b45565b61014e6102833660046117f4565b610b4a565b610177610296366004611774565b610b93565b6101976102a936600461178c565b610baa565b6101776102bc366004611741565b610bfe565b610177610c86565b60008061030b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ccc92505050565b600081815260026020908152604080832080548251818502810185019093528083529495506060949193909284015b828210156104095760008481526020908190206040805161014081018252600886029092018054835260018082015473ffffffffffffffffffffffffffffffffffffffff81168587015260ff740100000000000000000000000000000000000000009091048116938501939093526002820154606085015260038201546080850152600482015460a0850152600582015460c0850152600682015460e085015260079091015480831615156101008086019190915290049091161515610120830152908352909201910161033a565b50505050905060005b815181101561044d5781818151811061042757fe5b60200260200101516101000151156104455760019350505050610455565b600101610412565b506000925050505b92915050565b6000818152602081905260409020600201545b919050565b60008281526020819052604090206002015461049190610268610cd3565b6104d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611af9565b60405180910390fd5b6104da8282610cd7565b5050565b6104e661162c565b6004600061052986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ccc92505050565b815260208082019290925260409081016000908120858252835281902081516101408101835281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116948201949094527401000000000000000000000000000000000000000090930460ff908116928401929092526002810154606084015260038101546080840152600481015460a0840152600581015460c0840152600681015460e084015260070154808216151561010080850191909152900416151561012082015290505b9392505050565b6105fd610cd3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610661576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611c47565b6104da8282610d5a565b600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091529020546060906105ee90610ddd565b6106af61162c565b60606106bb848461066b565b9050600460006106ca83610ccc565b815260208082019290925260409081016000908120868252835281902081516101408101835281548152600182015473ffffffffffffffffffffffffffffffffffffffff81169482019490945260ff740100000000000000000000000000000000000000009094048416928101929092526002810154606083015260038101546080830152600481015460a0830152600581015460c0830152600681015460e0830152600701548083161515610100808401919091529004909116151561012082015291505092915050565b61079e61162c565b60006107df84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ccc92505050565b600081815260026020908152604080832080548251818502810185019093528083529495506060949193909284015b828210156108dd5760008481526020908190206040805161014081018252600886029092018054835260018082015473ffffffffffffffffffffffffffffffffffffffff81168587015260ff740100000000000000000000000000000000000000009091048116938501939093526002820154606085015260038201546080850152600482015460a0850152600582015460c0850152600682015460e085015260079091015480831615156101008086019190915290049091161515610120830152908352909201910161080e565b50505050905060005b8151811015610933578181815181106108fb57fe5b602002602001015161012001511561092b5781818151811061091957fe5b60200260200101519350505050610455565b6001016108e6565b50505092915050565b60006109687f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8533610b2d565b61097157600080fd5b61097961162c565b8a816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505089816040019060ff16908160ff16815250508881606001818152505087816080018181525050868160a0018181525050858160c0018181525050848160e001818152505083816101000190151590811515815250508281610120019015159081151581525050610a60610a598f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ccc92505050565b8d83610ef1565b9e9d5050505050505050505050505050565b6001546060908067ffffffffffffffff81118015610a8f57600080fd5b50604051908082528060200260200182016040528015610ac357816020015b6060815260200190600190039081610aae5790505b50915060005b81811015610b1057610af160018281548110610ae157fe5b9060005260206000200154610ddd565b838281518110610afd57fe5b6020908102919091010152600101610ac9565b505090565b60008281526020819052604081206105ee9083611340565b60008281526020819052604081206105ee908361134c565b600081565b60006105ee610b8e84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ccc92505050565b61136e565b6000818152602081905260408120610455906113b6565b600082815260208190526040902060020154610bc890610268610cd3565b610661576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611b8d565b6000610c0861162c565b610c1285856106a7565b90506000610c3c6402540be400610c368460a00151876113c190919063ffffffff16565b90611415565b90508160e0015181118015610c5457508160c0015181105b15610c625791506105ee9050565b8160c00151811115610c7a575060c0015190506105ee565b5060e0015190506105ee565b7f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8581565b60006105ee8373ffffffffffffffffffffffffffffffffffffffff8416611461565b6020015190565b3390565b6000828152602081905260409020610cef9082610caa565b156104da57610cfc610cd3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020610d7290826114ab565b156104da57610d7f610cd3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b606060005b60208160ff16108015610e285750828160ff1660208110610dff57fe5b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b15610e3557600101610de2565b60608160ff1667ffffffffffffffff81118015610e5157600080fd5b506040519080825280601f01601f191660200182016040528015610e7c576020820181803683370190505b50905060005b8260ff168160ff161015610ee957848160ff1660208110610e9f57fe5b1a60f81b828260ff1681518110610eb257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101610e82565b509392505050565b6000838152600460208181526040808420868552825280842085518155918501516001830180549287015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff00000000000000000000000000000000000000009094169390931791909116919091179055606084015160028201556080840151600382015560a08401519181019190915560c0830151600582015560e08301516006820155610100808401516007909201805461012086015115159092027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909316929092179290921617905561104a8461136e565b611083576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018490555b6000848152600260205260408120905b81548110156111ca57848282815481106110a957fe5b90600052602060002090600802016000015414156111c25760008282815481106110cf57fe5b6000918252602091829020600160089092020101549086015173ffffffffffffffffffffffffffffffffffffffff91821692501681146111c057846020015183838154811061111a57fe5b6000918252602080832060089290920290910160010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790558882526003808252604080842086861685528084528185207fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47090558b85529183528983015190941683529052208790555b505b600101611093565b50805460018181018355600092835260208084208651600890940201928355808601805184840180546040808b015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff9586167fffffffffffffffffffffffff000000000000000000000000000000000000000090941693909317929092169190911790915560608901516002870155608089015160038088019190915560a08a0151600488015560c08a0151600588015560e08a01516006880155610100808b0151600790980180546101208d015115159092027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9915157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090931692909217989098161790965589875294835284862091511685529052912085905590509392505050565b60006105ee83836114cd565b60006105ee8373ffffffffffffffffffffffffffffffffffffffff841661152c565b6000805b6001548110156113ad57826001828154811061138a57fe5b906000526020600020015414156113a557600191505061046e565b600101611372565b50600092915050565b600061045582611544565b6000826113d057506000610455565b828202828482816113dd57fe5b04146105ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611bea565b6000808211611450576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611b56565b81838161145957fe5b049392505050565b600061146d838361152c565b6114a357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610455565b506000610455565b60006105ee8373ffffffffffffffffffffffffffffffffffffffff8416611548565b8154600090821061150a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611a9c565b82600001828154811061151957fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156116225783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808301919081019060009087908390811061159957fe5b90600052602060002001549050808760000184815481106115b657fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806115e657fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610455565b6000915050610455565b60405180610140016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b803573ffffffffffffffffffffffffffffffffffffffff8116811461045557600080fd5b8035801515811461045557600080fd5b60008083601f8401126116e1578182fd5b50813567ffffffffffffffff8111156116f8578182fd5b60208301915083602082850101111561171057600080fd5b9250929050565b60008060408385031215611729578182fd5b611733848461169c565b946020939093013593505050565b600080600060608486031215611755578081fd5b61175f858561169c565b95602085013595506040909401359392505050565b600060208284031215611785578081fd5b5035919050565b6000806040838503121561179e578182fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff811681146117c8578182fd5b809150509250929050565b600080604083850312156117e5578182fd5b50508035926020909101359150565b60008060208385031215611806578182fd5b823567ffffffffffffffff81111561181c578283fd5b611828858286016116d0565b90969095509350505050565b600080600060408486031215611848578283fd5b833567ffffffffffffffff81111561185e578384fd5b61186a868287016116d0565b909790965060209590950135949350505050565b6000806000806000806000806000806000806101608d8f0312156118a0578788fd5b67ffffffffffffffff8d3511156118b5578788fd5b6118c28e8e358f016116d0565b909c509a5060208d013599506118db8e60408f0161169c565b985060608d013560ff811681146118f0578889fd5b975060808d0135965060a08d0135955060c08d0135945060e08d013593506101008d013592506119248e6101208f016116c0565b91506119348e6101408f016116c0565b90509295989b509295989b509295989b565b73ffffffffffffffffffffffffffffffffffffffff169052565b15159052565b60008151808452815b8181101561198b5760208185018101518683018201520161196f565b8181111561199c5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60ff169052565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611a68577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611a56858351611966565b94509285019290850190600101611a1c565b5092979650505050505050565b901515815260200190565b90815260200190565b6000602082526105ee6020830184611966565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b81518152602080830151610140830191611cc090840182611946565b506040830151611cd360408401826119cf565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151611d1982850182611960565b505061012080840151611d2e82850182611960565b50509291505056fea2646970667358221220d04f3bde3732e51f164a90e571ede79e469aae645de63cf0d8e129a4edbb553e64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c8063684a10b3116100b2578063af611ca011610081578063d547741f11610066578063d547741f1461029b578063fc7cc4cb146102ae578063ff9106c7146102c157610136565b8063af611ca014610275578063ca15c8731461028857610136565b8063684a10b3146102255780639010d07c1461023a57806391d148541461025a578063a217fddf1461026d57610136565b806336568abe1161010957806343d7cce6116100ee57806343d7cce6146101ec57806358dfe6f1146101ff57806359053bfe1461021257610136565b806336568abe146101b95780633cc1c7e0146101cc57610136565b8063074b7e971461013b578063248a9ca3146101645780632f2ff15d14610184578063324980b514610199575b600080fd5b61014e6101493660046117f4565b6102c9565b60405161015b9190611a75565b60405180910390f35b610177610172366004611774565b61045b565b60405161015b9190611a80565b61019761019236600461178c565b610473565b005b6101ac6101a7366004611834565b6104de565b60405161015b9190611ca4565b6101976101c736600461178c565b6105f5565b6101df6101da366004611717565b61066b565b60405161015b9190611a89565b6101ac6101fa366004611717565b6106a7565b6101ac61020d3660046117f4565b610796565b61014e61022036600461187e565b61093c565b61022d610a72565b60405161015b91906119f7565b61024d6102483660046117d3565b610b15565b60405161015b91906119d6565b61014e61026836600461178c565b610b2d565b610177610b45565b61014e6102833660046117f4565b610b4a565b610177610296366004611774565b610b93565b6101976102a936600461178c565b610baa565b6101776102bc366004611741565b610bfe565b610177610c86565b60008061030b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ccc92505050565b600081815260026020908152604080832080548251818502810185019093528083529495506060949193909284015b828210156104095760008481526020908190206040805161014081018252600886029092018054835260018082015473ffffffffffffffffffffffffffffffffffffffff81168587015260ff740100000000000000000000000000000000000000009091048116938501939093526002820154606085015260038201546080850152600482015460a0850152600582015460c0850152600682015460e085015260079091015480831615156101008086019190915290049091161515610120830152908352909201910161033a565b50505050905060005b815181101561044d5781818151811061042757fe5b60200260200101516101000151156104455760019350505050610455565b600101610412565b506000925050505b92915050565b6000818152602081905260409020600201545b919050565b60008281526020819052604090206002015461049190610268610cd3565b6104d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611af9565b60405180910390fd5b6104da8282610cd7565b5050565b6104e661162c565b6004600061052986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ccc92505050565b815260208082019290925260409081016000908120858252835281902081516101408101835281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116948201949094527401000000000000000000000000000000000000000090930460ff908116928401929092526002810154606084015260038101546080840152600481015460a0840152600581015460c0840152600681015460e084015260070154808216151561010080850191909152900416151561012082015290505b9392505050565b6105fd610cd3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610661576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611c47565b6104da8282610d5a565b600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff861684529091529020546060906105ee90610ddd565b6106af61162c565b60606106bb848461066b565b9050600460006106ca83610ccc565b815260208082019290925260409081016000908120868252835281902081516101408101835281548152600182015473ffffffffffffffffffffffffffffffffffffffff81169482019490945260ff740100000000000000000000000000000000000000009094048416928101929092526002810154606083015260038101546080830152600481015460a0830152600581015460c0830152600681015460e0830152600701548083161515610100808401919091529004909116151561012082015291505092915050565b61079e61162c565b60006107df84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ccc92505050565b600081815260026020908152604080832080548251818502810185019093528083529495506060949193909284015b828210156108dd5760008481526020908190206040805161014081018252600886029092018054835260018082015473ffffffffffffffffffffffffffffffffffffffff81168587015260ff740100000000000000000000000000000000000000009091048116938501939093526002820154606085015260038201546080850152600482015460a0850152600582015460c0850152600682015460e085015260079091015480831615156101008086019190915290049091161515610120830152908352909201910161080e565b50505050905060005b8151811015610933578181815181106108fb57fe5b602002602001015161012001511561092b5781818151811061091957fe5b60200260200101519350505050610455565b6001016108e6565b50505092915050565b60006109687f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8533610b2d565b61097157600080fd5b61097961162c565b8a816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505089816040019060ff16908160ff16815250508881606001818152505087816080018181525050868160a0018181525050858160c0018181525050848160e001818152505083816101000190151590811515815250508281610120019015159081151581525050610a60610a598f8f8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ccc92505050565b8d83610ef1565b9e9d5050505050505050505050505050565b6001546060908067ffffffffffffffff81118015610a8f57600080fd5b50604051908082528060200260200182016040528015610ac357816020015b6060815260200190600190039081610aae5790505b50915060005b81811015610b1057610af160018281548110610ae157fe5b9060005260206000200154610ddd565b838281518110610afd57fe5b6020908102919091010152600101610ac9565b505090565b60008281526020819052604081206105ee9083611340565b60008281526020819052604081206105ee908361134c565b600081565b60006105ee610b8e84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ccc92505050565b61136e565b6000818152602081905260408120610455906113b6565b600082815260208190526040902060020154610bc890610268610cd3565b610661576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611b8d565b6000610c0861162c565b610c1285856106a7565b90506000610c3c6402540be400610c368460a00151876113c190919063ffffffff16565b90611415565b90508160e0015181118015610c5457508160c0015181105b15610c625791506105ee9050565b8160c00151811115610c7a575060c0015190506105ee565b5060e0015190506105ee565b7f4370dcf3e42e4d5b773a451bb8390ee8e7308f47681d1414cff87c2ad0512c8581565b60006105ee8373ffffffffffffffffffffffffffffffffffffffff8416611461565b6020015190565b3390565b6000828152602081905260409020610cef9082610caa565b156104da57610cfc610cd3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020610d7290826114ab565b156104da57610d7f610cd3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b606060005b60208160ff16108015610e285750828160ff1660208110610dff57fe5b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b15610e3557600101610de2565b60608160ff1667ffffffffffffffff81118015610e5157600080fd5b506040519080825280601f01601f191660200182016040528015610e7c576020820181803683370190505b50905060005b8260ff168160ff161015610ee957848160ff1660208110610e9f57fe5b1a60f81b828260ff1681518110610eb257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600101610e82565b509392505050565b6000838152600460208181526040808420868552825280842085518155918501516001830180549287015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff00000000000000000000000000000000000000009094169390931791909116919091179055606084015160028201556080840151600382015560a08401519181019190915560c0830151600582015560e08301516006820155610100808401516007909201805461012086015115159092027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9315157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909316929092179290921617905561104a8461136e565b611083576001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018490555b6000848152600260205260408120905b81548110156111ca57848282815481106110a957fe5b90600052602060002090600802016000015414156111c25760008282815481106110cf57fe5b6000918252602091829020600160089092020101549086015173ffffffffffffffffffffffffffffffffffffffff91821692501681146111c057846020015183838154811061111a57fe5b6000918252602080832060089290920290910160010180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9485161790558882526003808252604080842086861685528084528185207fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47090558b85529183528983015190941683529052208790555b505b600101611093565b50805460018181018355600092835260208084208651600890940201928355808601805184840180546040808b015160ff1674010000000000000000000000000000000000000000027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff9586167fffffffffffffffffffffffff000000000000000000000000000000000000000090941693909317929092169190911790915560608901516002870155608089015160038088019190915560a08a0151600488015560c08a0151600588015560e08a01516006880155610100808b0151600790980180546101208d015115159092027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9915157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090931692909217989098161790965589875294835284862091511685529052912085905590509392505050565b60006105ee83836114cd565b60006105ee8373ffffffffffffffffffffffffffffffffffffffff841661152c565b6000805b6001548110156113ad57826001828154811061138a57fe5b906000526020600020015414156113a557600191505061046e565b600101611372565b50600092915050565b600061045582611544565b6000826113d057506000610455565b828202828482816113dd57fe5b04146105ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611bea565b6000808211611450576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611b56565b81838161145957fe5b049392505050565b600061146d838361152c565b6114a357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610455565b506000610455565b60006105ee8373ffffffffffffffffffffffffffffffffffffffff8416611548565b8154600090821061150a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c790611a9c565b82600001828154811061151957fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b600081815260018301602052604081205480156116225783547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808301919081019060009087908390811061159957fe5b90600052602060002001549050808760000184815481106115b657fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806115e657fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610455565b6000915050610455565b60405180610140016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b803573ffffffffffffffffffffffffffffffffffffffff8116811461045557600080fd5b8035801515811461045557600080fd5b60008083601f8401126116e1578182fd5b50813567ffffffffffffffff8111156116f8578182fd5b60208301915083602082850101111561171057600080fd5b9250929050565b60008060408385031215611729578182fd5b611733848461169c565b946020939093013593505050565b600080600060608486031215611755578081fd5b61175f858561169c565b95602085013595506040909401359392505050565b600060208284031215611785578081fd5b5035919050565b6000806040838503121561179e578182fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff811681146117c8578182fd5b809150509250929050565b600080604083850312156117e5578182fd5b50508035926020909101359150565b60008060208385031215611806578182fd5b823567ffffffffffffffff81111561181c578283fd5b611828858286016116d0565b90969095509350505050565b600080600060408486031215611848578283fd5b833567ffffffffffffffff81111561185e578384fd5b61186a868287016116d0565b909790965060209590950135949350505050565b6000806000806000806000806000806000806101608d8f0312156118a0578788fd5b67ffffffffffffffff8d3511156118b5578788fd5b6118c28e8e358f016116d0565b909c509a5060208d013599506118db8e60408f0161169c565b985060608d013560ff811681146118f0578889fd5b975060808d0135965060a08d0135955060c08d0135945060e08d013593506101008d013592506119248e6101208f016116c0565b91506119348e6101408f016116c0565b90509295989b509295989b509295989b565b73ffffffffffffffffffffffffffffffffffffffff169052565b15159052565b60008151808452815b8181101561198b5760208185018101518683018201520161196f565b8181111561199c5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60ff169052565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b82811015611a68577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611a56858351611966565b94509285019290850190600101611a1c565b5092979650505050505050565b901515815260200190565b90815260200190565b6000602082526105ee6020830184611966565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60408201527f6473000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f206772616e740000000000000000000000000000000000606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201527f2061646d696e20746f207265766f6b6500000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b81518152602080830151610140830191611cc090840182611946565b506040830151611cd360408401826119cf565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151611d1982850182611960565b505061012080840151611d2e82850182611960565b50509291505056fea2646970667358221220d04f3bde3732e51f164a90e571ede79e469aae645de63cf0d8e129a4edbb553e64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateSwapFee(address,uint256,uint256)": {
        "details": "This means the fee should be calculated based on the chain that the nodes emit a tx on",
        "params": {
          "amount": "in native token decimals",
          "chainID": "destination chain ID to query the token config for",
          "tokenAddress": "address of the destination token to query token config for"
        },
        "returns": {
          "_0": "Fee calculated in token decimals"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getToken(address,uint256)": {
        "params": {
          "chainID": "Chain ID of which token to get config for",
          "tokenAddress": "Matches the token ID by using a combo of address + chain ID"
        }
      },
      "getToken(string,uint256)": {
        "params": {
          "chainID": "Chain ID of which token address + config to get",
          "tokenID": "String input of the token ID for the token"
        }
      },
      "getTokenID(address,uint256)": {
        "params": {
          "chainID": "chainID of which to get token ID for",
          "tokenAddress": "address of token to get ID for"
        }
      },
      "getUnderlyingToken(string)": {
        "params": {
          "tokenID": "string token ID"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "hasUnderlyingToken(string)": {
        "params": {
          "tokenID": "String to check if it is a withdraw/underlying token"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)": {
        "params": {
          "chainID": "chain ID to use for the token config object",
          "hasUnderlying": "bool which represents whether this is a global mint token or one to withdraw()",
          "isUnderlying": "bool which represents if this token is the one to withdraw on the given chain",
          "maxSwap": "maximum amount of token allowed to be transferred at once - in native token decimals",
          "maxSwapFee": "max swap fee to be charged - in native token decimals",
          "minSwap": "minimum amount of token needed to be transferred at once - in native token decimals",
          "minSwapFee": "min swap fee to be charged - in native token decimals - especially useful for mainnet ETH",
          "swapFee": "percent based swap fee -- 10e6 == 10bps",
          "tokenAddress": "token address of the token on the given chain",
          "tokenDecimals": "decimals of token ",
          "tokenID": "string ID to set the token config object form"
        }
      }
    },
    "title": "BridgeConfig contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateSwapFee(address,uint256,uint256)": {
        "notice": "Calculates bridge swap fee based on the destination chain's token transfer."
      },
      "getAllTokenIDs()": {
        "notice": "Returns a list of all existing token IDs converted to strings"
      },
      "getToken(address,uint256)": {
        "notice": "Returns token config struct, given an address and chainID"
      },
      "getToken(string,uint256)": {
        "notice": "Returns the full token config struct "
      },
      "getTokenID(address,uint256)": {
        "notice": "Returns the token ID (string) of the cross-chain token inputted"
      },
      "getUnderlyingToken(string)": {
        "notice": "Returns which token is the underlying token to withdraw"
      },
      "hasUnderlyingToken(string)": {
        "notice": "Returns true if the token has an underlying token -- meaning the token is deposited into the bridge"
      },
      "isTokenIDExist(string)": {
        "notice": "Public function returning if token ID exists given a string"
      },
      "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)": {
        "notice": "Main write function of this contract - Handles creating the struct and passing it to the internal logic function"
      }
    },
    "notice": "This token is used for configuring different tokens on the bridge and mapping them across chains.*",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2760,
        "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2756_storage)"
      },
      {
        "astId": 5785,
        "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
        "label": "_allTokenIDs",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 5790,
        "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
        "label": "_allTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_array(t_struct(Token)5828_storage)dyn_storage)"
      },
      {
        "astId": 5796,
        "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
        "label": "_tokenIDMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bytes32))"
      },
      {
        "astId": 5802,
        "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
        "label": "_tokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Token)5828_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Token)5828_storage)dyn_storage": {
        "base": "t_struct(Token)5828_storage",
        "encoding": "dynamic_array",
        "label": "struct BridgeConfig.Token[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_array(t_struct(Token)5828_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BridgeConfig.Token[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Token)5828_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Token)5828_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => struct BridgeConfig.Token))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Token)5828_storage)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2756_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2756_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bytes32)"
      },
      "t_mapping(t_uint256,t_struct(Token)5828_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BridgeConfig.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)5828_storage"
      },
      "t_struct(AddressSet)5510_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5509,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5245_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)2756_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2753,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)5510_storage"
          },
          {
            "astId": 2755,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)5245_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5240,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5244,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Token)5828_storage": {
        "encoding": "inplace",
        "label": "struct BridgeConfig.Token",
        "members": [
          {
            "astId": 5809,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "chainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5811,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5813,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "tokenDecimals",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 5815,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "maxSwap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5817,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "minSwap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5819,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "swapFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5821,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "maxSwapFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5823,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "minSwapFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5825,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "hasUnderlying",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 5827,
            "contract": "contracts/synapse/BridgeConfig.sol:BridgeConfig",
            "label": "isUnderlying",
            "offset": 1,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}