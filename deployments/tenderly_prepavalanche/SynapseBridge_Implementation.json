{
  "address": "0xCe1618175F590817B7dBd2eB8e8747098dC040e6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "TokenDepositAndSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBridgeSlippage",
          "type": "uint256"
        }
      ],
      "name": "TokenDepositAndSwapV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Mintable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "TokenMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Mintable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "swapSuccess",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "TokenMintAndSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Mintable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBridgeSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "swapSuccess",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "TokenMintAndSwapV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenRedeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "swapTokenIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapMinAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapDeadline",
          "type": "uint256"
        }
      ],
      "name": "TokenRedeemAndRemove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "TokenRedeemAndSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBridgeSlippage",
          "type": "uint256"
        }
      ],
      "name": "TokenRedeemAndSwapV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "TokenWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "swapTokenIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapMinAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "swapDeadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "swapSuccess",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "TokenWithdrawAndRemove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxBridgeSlippage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "swapSuccess",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "TokenWithdrawAndSwapV2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOVERNANCE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NODEGROUP_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "kappas",
          "type": "bytes32[]"
        }
      ],
      "name": "addKappas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainGasAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "depositAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "depositMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "maxBridgeSlippage",
          "type": "uint256"
        }
      ],
      "name": "depositMaxAndSwapV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getFeeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "kappaExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Mintable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Mintable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "mintAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Mintable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "maxBridgeSlippage",
              "type": "uint256"
            }
          ],
          "internalType": "struct SynapseBridge.RouterTrade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "mintAndSwapV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20Burnable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20Burnable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "swapTokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "swapMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapDeadline",
          "type": "uint256"
        }
      ],
      "name": "redeemAndRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20Burnable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexFrom",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "tokenIndexTo",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "redeemAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20Burnable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "redeemMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20Burnable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "maxBridgeSlippage",
          "type": "uint256"
        }
      ],
      "name": "redeemMaxAndSwapV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setChainGasAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_wethAddress",
          "type": "address"
        }
      ],
      "name": "setWethAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "contract ISwap",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "swapTokenIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "swapMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapDeadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "withdrawAndRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "maxBridgeSlippage",
              "type": "uint256"
            }
          ],
          "internalType": "struct SynapseBridge.RouterTrade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "kappa",
          "type": "bytes32"
        }
      ],
      "name": "withdrawAndSwapV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x16da2af38d520b011a50e0f304b5ce9f3772558cd39f7d10f992794a50615cf3",
  "receipt": {
    "to": null,
    "from": "0x0AF91FA049A7e1894F480bFE5bBa20142C6c29a9",
    "contractAddress": "0xCe1618175F590817B7dBd2eB8e8747098dC040e6",
    "transactionIndex": 23,
    "gasUsed": "3755884",
    "logsBloom": "0x
    "blockHash": "0xf7f4bfa971eb7013c39c2c809ae234a83fbad6e3ded27c9a94549e2280bc6e5e",
    "transactionHash": "0x16da2af38d520b011a50e0f304b5ce9f3772558cd39f7d10f992794a50615cf3",
    "logs": [],
    "blockNumber": 9714872,
    "cumulativeGasUsed": "6749709",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "efe1c29c3a8132776e66b75375afd265",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"TokenDepositAndSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBridgeSlippage\",\"type\":\"uint256\"}],\"name\":\"TokenDepositAndSwapV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20Mintable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"TokenMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20Mintable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapSuccess\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"TokenMintAndSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20Mintable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBridgeSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapSuccess\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"TokenMintAndSwapV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"swapTokenIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapMinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapDeadline\",\"type\":\"uint256\"}],\"name\":\"TokenRedeemAndRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"TokenRedeemAndSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBridgeSlippage\",\"type\":\"uint256\"}],\"name\":\"TokenRedeemAndSwapV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"swapTokenIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapMinAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapSuccess\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"TokenWithdrawAndRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBridgeSlippage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapSuccess\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"TokenWithdrawAndSwapV2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNANCE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NODEGROUP_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"kappas\",\"type\":\"bytes32[]\"}],\"name\":\"addKappas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainGasAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"depositAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"depositMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBridgeSlippage\",\"type\":\"uint256\"}],\"name\":\"depositMaxAndSwapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"kappaExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Mintable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Mintable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"mintAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Mintable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBridgeSlippage\",\"type\":\"uint256\"}],\"internalType\":\"struct SynapseBridge.RouterTrade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"mintAndSwapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20Burnable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20Burnable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"swapTokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"swapMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapDeadline\",\"type\":\"uint256\"}],\"name\":\"redeemAndRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20Burnable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexFrom\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tokenIndexTo\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"redeemAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20Burnable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"redeemMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20Burnable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBridgeSlippage\",\"type\":\"uint256\"}],\"name\":\"redeemMaxAndSwapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setChainGasAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"name\":\"setWethAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"contract ISwap\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"swapTokenIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"swapMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"withdrawAndRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBridgeSlippage\",\"type\":\"uint256\"}],\"internalType\":\"struct SynapseBridge.RouterTrade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"withdrawAndSwapV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256,address,uint256)\":{\"params\":{\"amount\":\"Amount in native token decimals to transfer cross-chain pre-fees*\",\"chainId\":\"which chain to bridge assets onto\",\"to\":\"address on other chain to bridge assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\"}},\"depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\":{\"params\":{\"amount\":\"Amount in native token decimals to transfer cross-chain pre-fees\",\"chainId\":\"which chain to bridge assets onto\",\"deadline\":\"latest timestamp to accept this transaction*\",\"minDy\":\"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\",\"to\":\"address on other chain to bridge assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\",\"tokenIndexFrom\":\"the token the user wants to swap from\",\"tokenIndexTo\":\"the token the user wants to swap to\"}},\"depositMax(address,uint256,address)\":{\"params\":{\"chainId\":\"which chain to bridge assets onto\",\"to\":\"address on other chain to bridge assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge*\"}},\"depositMaxAndSwapV2(address,uint256,address,address[],address[],uint256)\":{\"params\":{\"chainId\":\"which chain to bridge assets onto\",\"to\":\"address on other chain to bridge assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge*\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"mint(address,address,uint256,uint256,bytes32)\":{\"details\":\"This means the SynapseBridge.sol contract must have minter access to the token attempting to be minted\",\"params\":{\"amount\":\"Amount in native token decimals to transfer cross-chain post-fees\",\"fee\":\"Amount in native token decimals to save to the contract as fees\",\"kappa\":\"kappa*\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\"}},\"mintAndSwap(address,address,uint256,uint256,address,uint8,uint8,uint256,uint256,bytes32)\":{\"details\":\"This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted\",\"params\":{\"amount\":\"Amount in native token decimals to transfer cross-chain post-fees\",\"deadline\":\"Epoch time of the deadline that the swap is allowed to be executed.\",\"fee\":\"Amount in native token decimals to save to the contract as fees\",\"kappa\":\"kappa*\",\"minDy\":\"Minumum amount (in final asset decimals) that must be swapped for, otherwise the user will receive the SynERC20.\",\"pool\":\"Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\",\"tokenIndexFrom\":\"Index of the SynERC20 asset in the pool\",\"tokenIndexTo\":\"Index of the desired final asset\"}},\"mintAndSwapV2(address,address,uint256,uint256,(address[],address[],uint256),bytes32)\":{\"details\":\"This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted\",\"params\":{\"amount\":\"Amount in native token decimals to transfer cross-chain post-fees\",\"fee\":\"Amount in native token decimals to save to the contract as fees\",\"kappa\":\"kappa*\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"redeem(address,uint256,address,uint256)\":{\"params\":{\"amount\":\"Amount in native token decimals to transfer cross-chain pre-fees*\",\"chainId\":\"which underlying chain to bridge assets onto\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\"}},\"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)\":{\"params\":{\"amount\":\"Amount in native token decimals to transfer cross-chain pre-fees\",\"chainId\":\"which underlying chain to bridge assets onto\",\"swapDeadline\":\"Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token*\",\"swapMinAmount\":\"Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\",\"swapTokenIndex\":\"Specifies which of the underlying LP assets the nodes should attempt to redeem for\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\"}},\"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\":{\"params\":{\"amount\":\"Amount in native token decimals to transfer cross-chain pre-fees\",\"chainId\":\"which underlying chain to bridge assets onto\",\"deadline\":\"latest timestamp to accept this transaction*\",\"minDy\":\"the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge\",\"tokenIndexFrom\":\"the token the user wants to swap from\",\"tokenIndexTo\":\"the token the user wants to swap to\"}},\"redeemMax(address,uint256,address)\":{\"params\":{\"chainId\":\"which underlying chain to bridge assets onto\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge*\"}},\"redeemMaxAndSwapV2(address,uint256,address,address[],address[],uint256)\":{\"params\":{\"chainId\":\"which underlying chain to bridge assets onto\",\"to\":\"address on other chain to redeem underlying assets to\",\"token\":\"ERC20 compatible token to deposit into the bridge*\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdraw(address,address,uint256,uint256,bytes32)\":{\"params\":{\"amount\":\"Amount in native token decimals to withdraw\",\"fee\":\"Amount in native token decimals to save to the contract as fees\",\"kappa\":\"kappa*\",\"to\":\"address on chain to send underlying assets to\",\"token\":\"ERC20 compatible token to withdraw from the bridge\"}},\"withdrawAndRemove(address,address,uint256,uint256,address,uint8,uint256,uint256,bytes32)\":{\"params\":{\"amount\":\"Amount in native token decimals to withdraw\",\"fee\":\"Amount in native token decimals to save to the contract as fees\",\"kappa\":\"kappa*\",\"pool\":\"Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\",\"swapDeadline\":\"Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\",\"swapMinAmount\":\"Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\",\"swapTokenIndex\":\"Specifies which of the underlying LP assets the nodes should attempt to redeem for\",\"to\":\"address on chain to send underlying assets to\",\"token\":\"ERC20 compatible token to withdraw from the bridge\"}},\"withdrawAndSwapV2(address,address,uint256,uint256,(address[],address[],uint256),bytes32)\":{\"params\":{\"amount\":\"Amount in native token decimals to withdraw\",\"fee\":\"Amount in native token decimals to save to the contract as fees\",\"kappa\":\"kappa*\",\"to\":\"address on chain to send underlying assets to\",\"token\":\"ERC20 compatible token to withdraw from the bridge\"}},\"withdrawFees(address,address)\":{\"params\":{\"to\":\"Address to send the fees to\",\"token\":\"ERC20 token in which fees acccumulated to transfer\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(address,uint256,address,uint256)\":{\"notice\":\"Relays to nodes to transfers an ERC20 token cross-chain\"},\"depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\":{\"notice\":\"Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user.\"},\"depositMax(address,uint256,address)\":{\"notice\":\"Relays to nodes to transfers an ERC20 token cross-chain\"},\"depositMaxAndSwapV2(address,uint256,address,address[],address[],uint256)\":{\"notice\":\"Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user.\"},\"mint(address,address,uint256,uint256,bytes32)\":{\"notice\":\"Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to). This is called by the nodes after a TokenDepositV2 event is emitted.\"},\"mintAndSwap(address,address,uint256,uint256,address,uint8,uint8,uint256,uint256,bytes32)\":{\"notice\":\"Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwap event is emitted.\"},\"mintAndSwapV2(address,address,uint256,uint256,(address[],address[],uint256),bytes32)\":{\"notice\":\"Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwapV2 event is emitted.\"},\"redeem(address,uint256,address,uint256)\":{\"notice\":\"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\"},\"redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)\":{\"notice\":\"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\"},\"redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)\":{\"notice\":\"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\"},\"redeemMax(address,uint256,address)\":{\"notice\":\"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\"},\"redeemMaxAndSwapV2(address,uint256,address,address[],address[],uint256)\":{\"notice\":\"Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\"},\"withdraw(address,address,uint256,uint256,bytes32)\":{\"notice\":\"Function to be called by the node group to withdraw the underlying assets from the contract\"},\"withdrawAndRemove(address,address,uint256,uint256,address,uint8,uint256,uint256,bytes32)\":{\"notice\":\"Function to be called by the node group to withdraw the underlying assets from the contract\"},\"withdrawAndSwapV2(address,address,uint256,uint256,(address[],address[],uint256),bytes32)\":{\"notice\":\"Function to be called by the node group to withdraw the underlying assets from the contract\"},\"withdrawFees(address,address)\":{\"notice\":\"withdraw specified ERC20 token fees to a given address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/SynapseBridge.sol\":\"SynapseBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-4.4.2/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0707ddb033e6bbb36546b9d58bb6f043076ceac7a10792a71dfd957583acde09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4.4.2/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.4.2/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.4.2/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.4.2/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.4.2/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.4.2/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.4.2/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.4.2/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.4.2/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.4.2/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable-4.4.2/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/bridge/SynapseBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable-4.4.2/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable-4.4.2/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable-4.4.2/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable-4.4.2/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.4.2/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.4.2/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.4.2/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-4.4.2/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces-8/ISwap.sol\\\";\\nimport \\\"./interfaces/IWETH9.sol\\\";\\nimport \\\"./interfaces-8/IRouter.sol\\\";\\n\\ninterface IERC20Mintable is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n}\\n\\ncontract SynapseBridge is\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Mintable;\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant NODEGROUP_ROLE = keccak256(\\\"NODEGROUP_ROLE\\\");\\n    bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\n\\n    mapping(address => uint256) private fees;\\n\\n    uint256 public startBlockNumber;\\n    uint256 public constant bridgeVersion = 6;\\n    uint256 public chainGasAmount;\\n    address payable public WETH_ADDRESS;\\n    address public ROUTER;\\n\\n    mapping(bytes32 => bool) private kappaMap;\\n\\n    receive() external payable {}\\n\\n    function initialize() external initializer {\\n        startBlockNumber = block.number;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        __AccessControl_init();\\n    }\\n\\n    function setChainGasAmount(uint256 amount) external {\\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \\\"Not governance\\\");\\n        chainGasAmount = amount;\\n    }\\n\\n    function setWethAddress(address payable _wethAddress) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Not admin\\\");\\n        WETH_ADDRESS = _wethAddress;\\n    }\\n\\n    function addKappas(bytes32[] calldata kappas) external {\\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \\\"Not governance\\\");\\n        for (uint256 i = 0; i < kappas.length; ++i) {\\n            kappaMap[kappas[i]] = true;\\n        }\\n    }\\n\\n    function setRouterAddress(address _router) external {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Not admin\\\");\\n        ROUTER = _router;\\n    }\\n\\n    event TokenDeposit(\\n        address indexed to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount\\n    );\\n    event TokenRedeem(\\n        address indexed to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount\\n    );\\n    event TokenWithdraw(\\n        address indexed to,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes32 indexed kappa\\n    );\\n    event TokenMint(\\n        address indexed to,\\n        IERC20Mintable token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes32 indexed kappa\\n    );\\n    event TokenDepositAndSwap(\\n        address indexed to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 minDy,\\n        uint256 deadline\\n    );\\n    event TokenMintAndSwap(\\n        address indexed to,\\n        IERC20Mintable token,\\n        uint256 amount,\\n        uint256 fee,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 minDy,\\n        uint256 deadline,\\n        bool swapSuccess,\\n        bytes32 indexed kappa\\n    );\\n    event TokenRedeemAndSwap(\\n        address indexed to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 minDy,\\n        uint256 deadline\\n    );\\n    event TokenRedeemAndRemove(\\n        address indexed to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount,\\n        uint8 swapTokenIndex,\\n        uint256 swapMinAmount,\\n        uint256 swapDeadline\\n    );\\n    event TokenWithdrawAndRemove(\\n        address indexed to,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        uint8 swapTokenIndex,\\n        uint256 swapMinAmount,\\n        uint256 swapDeadline,\\n        bool swapSuccess,\\n        bytes32 indexed kappa\\n    );\\n    event TokenDepositAndSwapV2(\\n        address indexed to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount,\\n        address[] path,\\n        address[] adapters,\\n        uint256 maxBridgeSlippage\\n    );\\n    event TokenMintAndSwapV2(\\n        address indexed to,\\n        IERC20Mintable token,\\n        uint256 amount,\\n        uint256 fee,\\n        address[] path,\\n        address[] adapters,\\n        uint256 maxBridgeSlippage,\\n        bool swapSuccess,\\n        bytes32 indexed kappa\\n    );\\n    event TokenRedeemAndSwapV2(\\n        address indexed to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount,\\n        address[] path,\\n        address[] adapters,\\n        uint256 maxBridgeSlippage\\n    );\\n    event TokenWithdrawAndSwapV2(\\n        address indexed to,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        address[] path,\\n        address[] adapters,\\n        uint256 maxBridgeSlippage,\\n        bool swapSuccess,\\n        bytes32 indexed kappa\\n    );\\n\\n    function validateBridgeFunction(\\n        uint256 amount,\\n        uint256 fee,\\n        bytes32 kappa\\n    ) private {\\n        require(\\n            hasRole(NODEGROUP_ROLE, msg.sender),\\n            \\\"Caller is not a node group\\\"\\n        );\\n\\n        require(amount > fee, \\\"Amount must be greater than fee\\\");\\n\\n        require(!kappaMap[kappa], \\\"Kappa is already present\\\");\\n\\n        kappaMap[kappa] = true;\\n    }\\n\\n    struct RouterTrade {\\n        address[] path;\\n        address[] adapters;\\n        uint256 maxBridgeSlippage;\\n    }\\n\\n    // VIEW FUNCTIONS ***/\\n    function getFeeBalance(address tokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return fees[tokenAddress];\\n    }\\n\\n    function kappaExists(bytes32 kappa) external view returns (bool) {\\n        return kappaMap[kappa];\\n    }\\n\\n    // FEE FUNCTIONS ***/\\n    /**\\n     * * @notice withdraw specified ERC20 token fees to a given address\\n     * * @param token ERC20 token in which fees acccumulated to transfer\\n     * * @param to Address to send the fees to\\n     */\\n    function withdrawFees(IERC20 token, address to) external whenNotPaused() {\\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \\\"Not governance\\\");\\n        require(to != address(0), \\\"Address is 0x000\\\");\\n        if (fees[address(token)] != 0) {\\n            token.safeTransfer(to, fees[address(token)]);\\n            fees[address(token)] = 0;\\n        }\\n    }\\n\\n    // PAUSABLE FUNCTIONS ***/\\n    function pause() external {\\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \\\"Not governance\\\");\\n        _pause();\\n    }\\n\\n    function unpause() external {\\n        require(hasRole(GOVERNANCE_ROLE, msg.sender), \\\"Not governance\\\");\\n        _unpause();\\n    }\\n\\n    // ******* STANDARD FUNCTIONS\\n\\n    /**\\n     * @notice Relays to nodes to transfers an ERC20 token cross-chain\\n     * @param to address on other chain to bridge assets to\\n     * @param chainId which chain to bridge assets onto\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\\n     **/\\n    function deposit(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount\\n    ) external nonReentrant() whenNotPaused() {\\n        emit TokenDeposit(to, chainId, token, amount);\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Relays to nodes to transfers an ERC20 token cross-chain\\n     * @param to address on other chain to bridge assets to\\n     * @param chainId which chain to bridge assets onto\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     **/\\n    function depositMax(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token\\n    ) external nonReentrant() whenNotPaused() {\\n        uint256 allowance = token.allowance(msg.sender, address(this));\\n        uint256 tokenBalance = token.balanceOf(msg.sender);\\n        uint256 amount = (allowance > tokenBalance) ? tokenBalance : allowance;\\n        emit TokenDeposit(to, chainId, token, amount);\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\\n     * @param to address on other chain to redeem underlying assets to\\n     * @param chainId which underlying chain to bridge assets onto\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\\n     **/\\n    function redeem(\\n        address to,\\n        uint256 chainId,\\n        ERC20Burnable token,\\n        uint256 amount\\n    ) external nonReentrant() whenNotPaused() {\\n        emit TokenRedeem(to, chainId, token, amount);\\n        token.burnFrom(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\\n     * @param to address on other chain to redeem underlying assets to\\n     * @param chainId which underlying chain to bridge assets onto\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     **/\\n    function redeemMax(\\n        address to,\\n        uint256 chainId,\\n        ERC20Burnable token\\n    ) external nonReentrant() whenNotPaused() {\\n        uint256 allowance = token.allowance(msg.sender, address(this));\\n        uint256 tokenBalance = token.balanceOf(msg.sender);\\n        uint256 amount = (allowance > tokenBalance) ? tokenBalance : allowance;\\n        emit TokenRedeem(to, chainId, token, amount);\\n        token.burnFrom(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Function to be called by the node group to withdraw the underlying assets from the contract\\n     * @param to address on chain to send underlying assets to\\n     * @param token ERC20 compatible token to withdraw from the bridge\\n     * @param amount Amount in native token decimals to withdraw\\n     * @param fee Amount in native token decimals to save to the contract as fees\\n     * @param kappa kappa\\n     **/\\n    function withdraw(\\n        address to,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes32 kappa\\n    ) external nonReentrant() whenNotPaused() {\\n        require(\\n            hasRole(NODEGROUP_ROLE, msg.sender),\\n            \\\"Caller is not a node group\\\"\\n        );\\n        require(amount > fee, \\\"Amount must be greater than fee\\\");\\n        require(!kappaMap[kappa], \\\"Kappa is already present\\\");\\n        kappaMap[kappa] = true;\\n        fees[address(token)] = fees[address(token)].add(fee);\\n        if (address(token) == WETH_ADDRESS && WETH_ADDRESS != address(0)) {\\n            IWETH9(WETH_ADDRESS).withdraw(amount.sub(fee));\\n            (bool success, ) = to.call{value: amount.sub(fee)}(\\\"\\\");\\n            require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n            emit TokenWithdraw(to, token, amount, fee, kappa);\\n        } else {\\n            emit TokenWithdraw(to, token, amount, fee, kappa);\\n            token.safeTransfer(to, amount.sub(fee));\\n        }\\n    }\\n\\n    /**\\n     * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to). This is called by the nodes after a TokenDepositV2 event is emitted.\\n     * @dev This means the SynapseBridge.sol contract must have minter access to the token attempting to be minted\\n     * @param to address on other chain to redeem underlying assets to\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     * @param amount Amount in native token decimals to transfer cross-chain post-fees\\n     * @param fee Amount in native token decimals to save to the contract as fees\\n     * @param kappa kappa\\n     **/\\n    function mint(\\n        address payable to,\\n        IERC20Mintable token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes32 kappa\\n    ) external nonReentrant() whenNotPaused() {\\n        require(\\n            hasRole(NODEGROUP_ROLE, msg.sender),\\n            \\\"Caller is not a node group\\\"\\n        );\\n        require(amount > fee, \\\"Amount must be greater than fee\\\");\\n        require(!kappaMap[kappa], \\\"Kappa is already present\\\");\\n        kappaMap[kappa] = true;\\n        fees[address(token)] = fees[address(token)].add(fee);\\n        emit TokenMint(to, token, amount.sub(fee), fee, kappa);\\n        token.mint(address(this), amount);\\n        IERC20(token).safeTransfer(to, amount.sub(fee));\\n        if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {\\n            to.call{value: chainGasAmount}(\\\"\\\");\\n        }\\n    }\\n\\n    // ******* V1 FUNCTIONS\\n\\n    /**\\n     * @notice Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user.\\n     * @param to address on other chain to bridge assets to\\n     * @param chainId which chain to bridge assets onto\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\\n     * @param tokenIndexFrom the token the user wants to swap from\\n     * @param tokenIndexTo the token the user wants to swap to\\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\\n     * @param deadline latest timestamp to accept this transaction\\n     **/\\n    function depositAndSwap(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        uint256 amount,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external nonReentrant() whenNotPaused() {\\n        emit TokenDepositAndSwap(\\n            to,\\n            chainId,\\n            token,\\n            amount,\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            minDy,\\n            deadline\\n        );\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\\n     * @param to address on other chain to redeem underlying assets to\\n     * @param chainId which underlying chain to bridge assets onto\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\\n     * @param tokenIndexFrom the token the user wants to swap from\\n     * @param tokenIndexTo the token the user wants to swap to\\n     * @param minDy the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.\\n     * @param deadline latest timestamp to accept this transaction\\n     **/\\n    function redeemAndSwap(\\n        address to,\\n        uint256 chainId,\\n        ERC20Burnable token,\\n        uint256 amount,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 minDy,\\n        uint256 deadline\\n    ) external nonReentrant() whenNotPaused() {\\n        emit TokenRedeemAndSwap(\\n            to,\\n            chainId,\\n            token,\\n            amount,\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            minDy,\\n            deadline\\n        );\\n        token.burnFrom(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \\\"swap\\\" out of the LP token)\\n     * @param to address on other chain to redeem underlying assets to\\n     * @param chainId which underlying chain to bridge assets onto\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     * @param amount Amount in native token decimals to transfer cross-chain pre-fees\\n     * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\\n     * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\\n     * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\\n     **/\\n    function redeemAndRemove(\\n        address to,\\n        uint256 chainId,\\n        ERC20Burnable token,\\n        uint256 amount,\\n        uint8 swapTokenIndex,\\n        uint256 swapMinAmount,\\n        uint256 swapDeadline\\n    ) external nonReentrant() whenNotPaused() {\\n        emit TokenRedeemAndRemove(\\n            to,\\n            chainId,\\n            token,\\n            amount,\\n            swapTokenIndex,\\n            swapMinAmount,\\n            swapDeadline\\n        );\\n        token.burnFrom(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwap event is emitted.\\n     * @dev This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted\\n     * @param to address on other chain to redeem underlying assets to\\n     * @param token ERC20 compatible token to deposit into the bridge\\n     * @param amount Amount in native token decimals to transfer cross-chain post-fees\\n     * @param fee Amount in native token decimals to save to the contract as fees\\n     * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\\n     * @param tokenIndexFrom Index of the SynERC20 asset in the pool\\n     * @param tokenIndexTo Index of the desired final asset\\n     * @param minDy Minumum amount (in final asset decimals) that must be swapped for, otherwise the user will receive the SynERC20.\\n     * @param deadline Epoch time of the deadline that the swap is allowed to be executed.\\n     * @param kappa kappa\\n     **/\\n    function mintAndSwap(\\n        address payable to,\\n        IERC20Mintable token,\\n        uint256 amount,\\n        uint256 fee,\\n        ISwap pool,\\n        uint8 tokenIndexFrom,\\n        uint8 tokenIndexTo,\\n        uint256 minDy,\\n        uint256 deadline,\\n        bytes32 kappa\\n    ) external nonReentrant() whenNotPaused() {\\n        require(\\n            hasRole(NODEGROUP_ROLE, msg.sender),\\n            \\\"Caller is not a node group\\\"\\n        );\\n        require(amount > fee, \\\"Amount must be greater than fee\\\");\\n        require(!kappaMap[kappa], \\\"Kappa is already present\\\");\\n        kappaMap[kappa] = true;\\n        fees[address(token)] = fees[address(token)].add(fee);\\n        // Transfer gas airdrop\\n        if (chainGasAmount != 0 && address(this).balance > chainGasAmount) {\\n            to.call{value: chainGasAmount}(\\\"\\\");\\n        }\\n        // first check to make sure more will be given than min amount required\\n        uint256 expectedOutput = ISwap(pool).calculateSwap(\\n            tokenIndexFrom,\\n            tokenIndexTo,\\n            amount.sub(fee)\\n        );\\n\\n        if (expectedOutput >= minDy) {\\n            // proceed with swap\\n            token.mint(address(this), amount);\\n            token.safeIncreaseAllowance(address(pool), amount);\\n            try\\n                ISwap(pool).swap(\\n                    tokenIndexFrom,\\n                    tokenIndexTo,\\n                    amount.sub(fee),\\n                    minDy,\\n                    deadline\\n                )\\n            returns (uint256 finalSwappedAmount) {\\n                // Swap succeeded, transfer swapped asset\\n                IERC20 swappedTokenTo = ISwap(pool).getToken(tokenIndexTo);\\n                if (\\n                    address(swappedTokenTo) == WETH_ADDRESS &&\\n                    WETH_ADDRESS != address(0)\\n                ) {\\n                    IWETH9(WETH_ADDRESS).withdraw(finalSwappedAmount);\\n                    (bool success, ) = to.call{value: finalSwappedAmount}(\\\"\\\");\\n                    require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n                    emit TokenMintAndSwap( \\n                        to,\\n                        token,\\n                        finalSwappedAmount,\\n                        fee,\\n                        tokenIndexFrom,\\n                        tokenIndexTo,\\n                        minDy,\\n                        deadline,\\n                        true,\\n                        kappa\\n                    );\\n                } else {\\n                    swappedTokenTo.safeTransfer(to, finalSwappedAmount);\\n                    emit TokenMintAndSwap(\\n                        to,\\n                        token,\\n                        finalSwappedAmount,\\n                        fee,\\n                        tokenIndexFrom,\\n                        tokenIndexTo,\\n                        minDy,\\n                        deadline,\\n                        true,\\n                        kappa\\n                    );\\n                }\\n            } catch {\\n                IERC20(token).safeTransfer(to, amount.sub(fee));\\n                emit TokenMintAndSwap(\\n                    to,\\n                    token,\\n                    amount.sub(fee),\\n                    fee,\\n                    tokenIndexFrom,\\n                    tokenIndexTo,\\n                    minDy,\\n                    deadline,\\n                    false,\\n                    kappa\\n                );\\n            }\\n        } else {\\n            token.mint(address(this), amount);\\n            IERC20(token).safeTransfer(to, amount.sub(fee));\\n            emit TokenMintAndSwap(\\n                to,\\n                token,\\n                amount.sub(fee),\\n                fee,\\n                tokenIndexFrom,\\n                tokenIndexTo,\\n                minDy,\\n                deadline,\\n                false,\\n                kappa\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to be called by the node group to withdraw the underlying assets from the contract\\n     * @param to address on chain to send underlying assets to\\n     * @param token ERC20 compatible token to withdraw from the bridge\\n     * @param amount Amount in native token decimals to withdraw\\n     * @param fee Amount in native token decimals to save to the contract as fees\\n     * @param pool Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.\\n     * @param swapTokenIndex Specifies which of the underlying LP assets the nodes should attempt to redeem for\\n     * @param swapMinAmount Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap\\n     * @param swapDeadline Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token\\n     * @param kappa kappa\\n     **/\\n    function withdrawAndRemove(\\n        address to,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        ISwap pool,\\n        uint8 swapTokenIndex,\\n        uint256 swapMinAmount,\\n        uint256 swapDeadline,\\n        bytes32 kappa\\n    ) external nonReentrant() whenNotPaused() {\\n        require(\\n            hasRole(NODEGROUP_ROLE, msg.sender),\\n            \\\"Caller is not a node group\\\"\\n        );\\n        require(amount > fee, \\\"Amount must be greater than fee\\\");\\n        require(!kappaMap[kappa], \\\"Kappa is already present\\\");\\n        kappaMap[kappa] = true;\\n        fees[address(token)] = fees[address(token)].add(fee);\\n        // first check to make sure more will be given than min amount required\\n        uint256 expectedOutput = ISwap(pool).calculateRemoveLiquidityOneToken(\\n            amount.sub(fee),\\n            swapTokenIndex\\n        );\\n\\n        if (expectedOutput >= swapMinAmount) {\\n            token.safeIncreaseAllowance(address(pool), amount.sub(fee));\\n            try\\n                ISwap(pool).removeLiquidityOneToken(\\n                    amount.sub(fee),\\n                    swapTokenIndex,\\n                    swapMinAmount,\\n                    swapDeadline\\n                )\\n            returns (uint256 finalSwappedAmount) {\\n                // Swap succeeded, transfer swapped asset\\n                IERC20 swappedTokenTo = ISwap(pool).getToken(swapTokenIndex);\\n                swappedTokenTo.safeTransfer(to, finalSwappedAmount);\\n                emit TokenWithdrawAndRemove(\\n                    to,\\n                    token,\\n                    finalSwappedAmount,\\n                    fee,\\n                    swapTokenIndex,\\n                    swapMinAmount,\\n                    swapDeadline,\\n                    true,\\n                    kappa\\n                );\\n            } catch {\\n                IERC20(token).safeTransfer(to, amount.sub(fee));\\n                emit TokenWithdrawAndRemove(\\n                    to,\\n                    token,\\n                    amount.sub(fee),\\n                    fee,\\n                    swapTokenIndex,\\n                    swapMinAmount,\\n                    swapDeadline,\\n                    false,\\n                    kappa\\n                );\\n            }\\n        } else {\\n            token.safeTransfer(to, amount.sub(fee));\\n            emit TokenWithdrawAndRemove(\\n                to,\\n                token,\\n                amount.sub(fee),\\n                fee,\\n                swapTokenIndex,\\n                swapMinAmount,\\n                swapDeadline,\\n                false,\\n                kappa\\n            );\\n        }\\n    }\\n\\n    // ******* V2 FUNCTIONS\\n    /**\\n   * @notice Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user.\\n   * @param to address on other chain to bridge assets to\\n   * @param chainId which chain to bridge assets onto\\n   * @param token ERC20 compatible token to deposit into the bridge\\n   \\n   **/\\n    function depositMaxAndSwapV2(\\n        address to,\\n        uint256 chainId,\\n        IERC20 token,\\n        address[] calldata path,\\n        address[] calldata adapters,\\n        uint256 maxBridgeSlippage\\n    ) external nonReentrant() whenNotPaused() {\\n        uint256 allowance = token.allowance(msg.sender, address(this));\\n        uint256 tokenBalance = token.balanceOf(msg.sender);\\n        uint256 amount = (allowance > tokenBalance) ? tokenBalance : allowance;\\n        emit TokenDepositAndSwapV2(\\n            to,\\n            chainId,\\n            token,\\n            amount,\\n            path,\\n            adapters,\\n            maxBridgeSlippage\\n        );\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n   * @notice Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain\\n   * @param to address on other chain to redeem underlying assets to\\n   * @param chainId which underlying chain to bridge assets onto\\n   * @param token ERC20 compatible token to deposit into the bridge\\n   \\n   **/\\n    function redeemMaxAndSwapV2(\\n        address to,\\n        uint256 chainId,\\n        ERC20Burnable token,\\n        address[] calldata path,\\n        address[] calldata adapters,\\n        uint256 maxBridgeSlippage\\n    ) external nonReentrant() whenNotPaused() {\\n        uint256 allowance = token.allowance(msg.sender, address(this));\\n        uint256 tokenBalance = token.balanceOf(msg.sender);\\n        uint256 amount = (allowance > tokenBalance) ? tokenBalance : allowance;\\n        emit TokenRedeemAndSwapV2(\\n            to,\\n            chainId,\\n            token,\\n            amount,\\n            path,\\n            adapters,\\n            maxBridgeSlippage\\n        );\\n        token.burnFrom(msg.sender, amount);\\n    }\\n\\n    function handleRouterSwap(\\n        address to,\\n        uint256 amount,\\n        uint256 fee,\\n        RouterTrade calldata _trade\\n    ) private returns (bool) {\\n            try IRouter(ROUTER).selfSwap(amount.sub(fee),0,_trade.path,_trade.adapters,to,0) {\\n                return true;\\n            } catch {\\n                return false;\\n            }\\n    }\\n\\n    /**\\n   * @notice Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwapV2 event is emitted.\\n   * @dev This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted\\n   * @param to address on other chain to redeem underlying assets to\\n   * @param token ERC20 compatible token to deposit into the bridge\\n   * @param amount Amount in native token decimals to transfer cross-chain post-fees\\n   * @param fee Amount in native token decimals to save to the contract as fees\\n    \\n   * @param kappa kappa\\n   **/\\n    function mintAndSwapV2(\\n        address payable to,\\n        IERC20Mintable token,\\n        uint256 amount,\\n        uint256 fee,\\n        RouterTrade calldata _trade,\\n        bytes32 kappa\\n    ) external nonReentrant() whenNotPaused() {\\n        validateBridgeFunction(amount, fee, kappa);\\n        fees[address(token)] = fees[address(token)].add(fee);\\n\\n        // Transfer gas airdrop\\n        if (checkChainGasAmount()) {\\n            to.call{value: chainGasAmount}(\\\"\\\");\\n        }\\n        token.mint(ROUTER, amount);\\n        token.mint(address(this), fee);\\n\\n        bool swapSuccess = handleRouterSwap(to, amount, fee, _trade);\\n        if (swapSuccess) {\\n            emit TokenMintAndSwapV2(\\n                to,\\n                token,\\n                amount.sub(fee),\\n                fee,\\n                _trade.path,\\n                _trade.adapters,\\n                _trade.maxBridgeSlippage,\\n                true,\\n                kappa\\n            );\\n        } else {\\n            IERC20(token).safeTransferFrom(ROUTER, to, amount.sub(fee));\\n            emit TokenMintAndSwapV2(\\n                to,\\n                token,\\n                amount.sub(fee),\\n                fee,\\n                _trade.path,\\n                _trade.adapters,\\n                _trade.maxBridgeSlippage,\\n                false,\\n                kappa\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Function to be called by the node group to withdraw the underlying assets from the contract\\n     * @param to address on chain to send underlying assets to\\n     * @param token ERC20 compatible token to withdraw from the bridge\\n     * @param amount Amount in native token decimals to withdraw\\n     * @param fee Amount in native token decimals to save to the contract as fees\\n     * @param kappa kappa\\n     **/\\n    function withdrawAndSwapV2(\\n        address to,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 fee,\\n        RouterTrade calldata _trade,\\n        bytes32 kappa\\n    ) external nonReentrant() whenNotPaused() {\\n        validateBridgeFunction(amount, fee, kappa);\\n        if (checkChainGasAmount()) {\\n            to.call{value: chainGasAmount}(\\\"\\\");\\n        }\\n        fees[address(token)] = fees[address(token)].add(fee);\\n        uint256 amountSubFee = amount.sub(fee);\\n        IERC20(token).safeTransfer(ROUTER, amountSubFee);\\n        // (bool success, bytes memory result) = ROUTER.call(routeraction);\\n        //  if (success) {\\n        //   // Swap successful\\n        //   emit TokenWithdrawAndSwapV2(to, token, amount.sub(fee), fee, routeraction, true, kappa);\\n        // } else {\\n        //     IERC20(token).safeTransferFrom(ROUTER, to, amount.sub(fee));\\n        //     emit TokenWithdrawAndSwapV2(to, token, amount.sub(fee), fee, routeraction, false, kappa);\\n        // }\\n        bool swapSuccess = handleRouterSwap(to, amount, fee, _trade);\\n        if (swapSuccess) {\\n            emit TokenWithdrawAndSwapV2(\\n                to,\\n                token,\\n                amount.sub(fee),\\n                fee,\\n                _trade.path,\\n                _trade.adapters,\\n                _trade.maxBridgeSlippage,\\n                true,\\n                kappa\\n            );\\n        } else {\\n            IERC20(token).safeTransferFrom(ROUTER, to, amount.sub(fee));\\n            emit TokenWithdrawAndSwapV2(\\n                to,\\n                token,\\n                amount.sub(fee),\\n                fee,\\n                _trade.path,\\n                _trade.adapters,\\n                _trade.maxBridgeSlippage,\\n                true,\\n                kappa\\n            );\\n        }\\n        // try IRouter(ROUTER).selfSwap(amountSubFee, 0, path, adapters, to, 0) {\\n        //   emit TokenWithdrawAndSwapV2(to, token, amountSubFee, fee, path, adapters, maxBridgeSlippage, true, kappa);\\n        // } catch {\\n        //   IERC20(token).safeTransferFrom(ROUTER, to, amount.sub(fee));\\n        //   emit TokenWithdrawAndSwapV2(to, token, amountSubFee, fee, path, adapters, maxBridgeSlippage, false, kappa);\\n        // }\\n    }\\n\\n    function checkChainGasAmount() private view returns (bool) {\\n        return chainGasAmount != 0 && address(this).balance > chainGasAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x6a2a574cc268f5a609ed0e8dea3a70bbc504af468230ae2d002272abd91a8ac6\",\"license\":\"MIT\"},\"contracts/bridge/interfaces-8/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT \\n\\npragma solidity 0.8.11;\\n\\ninterface IRouter { \\n      \\n  function selfSwap(\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address[] calldata adapters,\\n        address _to,\\n        uint256 _fee\\n  ) external;\\n}\",\"keccak256\":\"0xdee07389cb34df18435b7a3fcd7fcdf5bd8b82346df69dcd4946dc5b364fa668\",\"license\":\"MIT\"},\"contracts/bridge/interfaces-8/ISwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport '@openzeppelin/contracts-4.4.2/token/ERC20/ERC20.sol';\\n\\ninterface ISwap {\\n  // pool data view functions\\n  function getA() external view returns (uint256);\\n\\n  function getToken(uint8 index) external view returns (IERC20);\\n\\n  function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n  function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n  function getVirtualPrice() external view returns (uint256);\\n\\n  // min return calculation functions\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function calculateRemoveLiquidity(uint256 amount)\\n    external\\n    view\\n    returns (uint256[] memory);\\n\\n  function calculateRemoveLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) external view returns (uint256 availableTokenAmount);\\n\\n  // state modifying functions\\n  function initialize(\\n    IERC20[] memory pooledTokens,\\n    uint8[] memory decimals,\\n    string memory lpTokenName,\\n    string memory lpTokenSymbol,\\n    uint256 a,\\n    uint256 fee,\\n    uint256 adminFee,\\n    address lpTokenTargetAddress\\n  ) external;\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function addLiquidity(\\n    uint256[] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[] memory);\\n\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidityImbalance(\\n    uint256[] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x4c67fd97e0c048ce291959f56c4b67edc904e9b721d5744b1104e67df9f51a8d\",\"license\":\"MIT\"},\"contracts/bridge/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\ninterface IWETH9 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    receive() external payable;\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0x081ebde11dad2210d382564d40336f914d3d621750645f23707ca1a92139dbe2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506142fb806100206000396000f3fe60806040526004361061023f5760003560e01c806390d250741161012e578063c78f6803116100ab578063f25552781161006f578063f2555278146106cc578063f36c8f5c146106ec578063f3befd011461070e578063f3f094a114610730578063fb169ff01461075057600080fd5b8063c78f680314610620578063d547741f14610656578063d57eafac14610676578063e00a83e014610696578063e7a59998146106ac57600080fd5b8063a96e2423116100f2578063a96e24231461058b578063ac865626146105ab578063b250fe6b146105c0578063b2e97f11146105e0578063bcaeea5e1461060057600080fd5b806390d25074146104f657806391d1485414610516578063a06fec1b14610536578063a217fddf14610556578063a2a2af0b1461056b57600080fd5b806336e712ed116101bc5780635198c366116101805780635198c366146104745780635c975abb146104945780638129fc1c146104ac578063839ed90a146104c15780638456cb59146104e157600080fd5b806336e712ed146103e9578063381d86e3146104095780633f4ba83a1461042957806341cb87fc1461043e578063498a4c2d1461045e57600080fd5b8063248a9ca311610203578063248a9ca31461031a5780632f2ff15d146103585780632fe87b951461037857806332fe7b26146103a957806336568abe146103c957600080fd5b806301ffc9a71461024b578063040141e51461028057806317357892146102b85780631cf5f07f146102da57806320d7b327146102fa57600080fd5b3661024657005b600080fd5b34801561025757600080fd5b5061026b6102663660046136c6565b610770565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b5060fe546102a0906001600160a01b031681565b6040516001600160a01b039091168152602001610277565b3480156102c457600080fd5b506102d86102d336600461371b565b6107a7565b005b3480156102e657600080fd5b506102d86102f53660046137b8565b610e50565b34801561030657600080fd5b506102d86103153660046137b8565b611171565b34801561032657600080fd5b5061034a610335366004613809565b60009081526065602052604090206001015490565b604051908152602001610277565b34801561036457600080fd5b506102d8610373366004613822565b6113dd565b34801561038457600080fd5b5061026b610393366004613809565b6000908152610100602052604090205460ff1690565b3480156103b557600080fd5b5060ff546102a0906001600160a01b031681565b3480156103d557600080fd5b506102d86103e4366004613822565b611408565b3480156103f557600080fd5b506102d8610404366004613852565b611486565b34801561041557600080fd5b506102d861042436600461390c565b611592565b34801561043557600080fd5b506102d8611735565b34801561044a57600080fd5b506102d86104593660046139b2565b611773565b34801561046a57600080fd5b5061034a60fc5481565b34801561048057600080fd5b506102d861048f3660046139cf565b6117d8565b3480156104a057600080fd5b5060c95460ff1661026b565b3480156104b857600080fd5b506102d8611987565b3480156104cd57600080fd5b506102d86104dc366004613a11565b611a57565b3480156104ed57600080fd5b506102d8611b5e565b34801561050257600080fd5b506102d8610511366004613a90565b611b9a565b34801561052257600080fd5b5061026b610531366004613822565b611c53565b34801561054257600080fd5b506102d861055136600461390c565b611c7e565b34801561056257600080fd5b5061034a600081565b34801561057757600080fd5b506102d8610586366004613a11565b611e7e565b34801561059757600080fd5b506102d86105a63660046139b2565b611f3a565b3480156105b757600080fd5b5061034a600681565b3480156105cc57600080fd5b506102d86105db366004613809565b611f9f565b3480156105ec57600080fd5b506102d86105fb366004613af0565b611fd8565b34801561060c57600080fd5b506102d861061b3660046139cf565b612232565b34801561062c57600080fd5b5061034a61063b3660046139b2565b6001600160a01b0316600090815260fb602052604090205490565b34801561066257600080fd5b506102d8610671366004613822565b61242c565b34801561068257600080fd5b506102d8610691366004613b6e565b612452565b3480156106a257600080fd5b5061034a60fd5481565b3480156106b857600080fd5b506102d86106c7366004613bf9565b612874565b3480156106d857600080fd5b506102d86106e7366004613c3b565b612909565b3480156106f857600080fd5b5061034a60008051602061426683398151915281565b34801561071a57600080fd5b5061034a6000805160206142a683398151915281565b34801561073c57600080fd5b506102d861074b366004613a90565b612a07565b34801561075c57600080fd5b506102d861076b366004613af0565b612afc565b60006001600160e01b03198216637965db0b60e01b14806107a157506301ffc9a760e01b6001600160e01b03198316145b92915050565b600260975414156107d35760405162461bcd60e51b81526004016107ca90613c69565b60405180910390fd5b600260975560c95460ff16156107fb5760405162461bcd60e51b81526004016107ca90613ca0565b6108136000805160206142a683398151915233611c53565b61082f5760405162461bcd60e51b81526004016107ca90613cca565b86881161084e5760405162461bcd60e51b81526004016107ca90613d01565b6000818152610100602052604090205460ff161561087e5760405162461bcd60e51b81526004016107ca90613d38565b600081815261010060209081526040808320805460ff191660011790556001600160a01b038c16835260fb9091529020546108b99088612df2565b6001600160a01b038a16600090815260fb602052604090205560fd54158015906108e4575060fd5447115b1561093d5760fd546040516001600160a01b038c169190600081818185875af1925050503d8060008114610934576040519150601f19603f3d011682016040523d82523d6000602084013e610939565b606091505b5050505b60006001600160a01b03871663a95b089f878761095a8d8d612e05565b6040516001600160e01b031960e086901b16815260ff93841660048201529290911660248301526044820152606401602060405180830381865afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190613d6f565b9050838110610d7e576040516340c10f1960e01b81526001600160a01b038b16906340c10f1990610a019030908d90600401613d88565b600060405180830381600087803b158015610a1b57600080fd5b505af1158015610a2f573d6000803e3d6000fd5b50610a48925050506001600160a01b038b16888b612e11565b6001600160a01b03871663916955868787610a638d8d612e05565b6040516001600160e01b031960e086901b16815260ff93841660048201529290911660248301526044820152606481018790526084810186905260a4016020604051808303816000875af1925050508015610adb575060408051601f3d908101601f19168201909252610ad891810190613d6f565b60015b610b4b57610afe8b610aed8b8b612e05565b6001600160a01b038d169190612eee565b816001600160a01b038c166000805160206142868339815191528c610b238d8d612e05565b8c8b8b8b8b6000604051610b3e989796959493929190613da1565b60405180910390a3610e3e565b60405162415c3360e91b815260ff871660048201526000906001600160a01b038a16906382b8660090602401602060405180830381865afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190613de8565b60fe549091506001600160a01b038083169116148015610be2575060fe546001600160a01b031615155b15610d235760fe54604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015610c2d57600080fd5b505af1158015610c41573d6000803e3d6000fd5b5050505060008d6001600160a01b03168360405160006040518083038185875af1925050503d8060008114610c92576040519150601f19603f3d011682016040523d82523d6000602084013e610c97565b606091505b5050905080610cde5760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016107ca565b848e6001600160a01b03166000805160206142868339815191528f868f8e8e8e8e6001604051610d15989796959493929190613da1565b60405180910390a350610d77565b610d376001600160a01b0382168e84612eee565b838d6001600160a01b03166000805160206142868339815191528e858e8d8d8d8d6001604051610d6e989796959493929190613da1565b60405180910390a35b5050610e3e565b6040516340c10f1960e01b81526001600160a01b038b16906340c10f1990610dac9030908d90600401613d88565b600060405180830381600087803b158015610dc657600080fd5b505af1158015610dda573d6000803e3d6000fd5b50505050610df58b610aed8a8c612e0590919063ffffffff16565b816001600160a01b038c166000805160206142868339815191528c610e1a8d8d612e05565b8c8b8b8b8b6000604051610e35989796959493929190613da1565b60405180910390a35b50506001609755505050505050505050565b60026097541415610e735760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615610e9b5760405162461bcd60e51b81526004016107ca90613ca0565b610eb36000805160206142a683398151915233611c53565b610ecf5760405162461bcd60e51b81526004016107ca90613cca565b818311610eee5760405162461bcd60e51b81526004016107ca90613d01565b6000818152610100602052604090205460ff1615610f1e5760405162461bcd60e51b81526004016107ca90613d38565b600081815261010060209081526040808320805460ff191660011790556001600160a01b038716835260fb909152902054610f599083612df2565b6001600160a01b03808616600081815260fb602052604090209290925560fe5416148015610f91575060fe546001600160a01b031615155b156110f65760fe546001600160a01b0316632e1a7d4d610fb18585612e05565b6040518263ffffffff1660e01b8152600401610fcf91815260200190565b600060405180830381600087803b158015610fe957600080fd5b505af1158015610ffd573d6000803e3d6000fd5b506000925050506001600160a01b0386166110188585612e05565b604051600081818185875af1925050503d8060008114611054576040519150601f19603f3d011682016040523d82523d6000602084013e611059565b606091505b50509050806110a05760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016107ca565b604080516001600160a01b0387811682526020820187905291810185905283918816907f8b0afdc777af6946e53045a4a75212769075d30455a212ac51c9b16f9c5c9b269060600160405180910390a350611165565b604080516001600160a01b0386811682526020820186905291810184905282918716907f8b0afdc777af6946e53045a4a75212769075d30455a212ac51c9b16f9c5c9b269060600160405180910390a3611165856111548585612e05565b6001600160a01b0387169190612eee565b50506001609755505050565b600260975414156111945760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff16156111bc5760405162461bcd60e51b81526004016107ca90613ca0565b6111d46000805160206142a683398151915233611c53565b6111f05760405162461bcd60e51b81526004016107ca90613cca565b81831161120f5760405162461bcd60e51b81526004016107ca90613d01565b6000818152610100602052604090205460ff161561123f5760405162461bcd60e51b81526004016107ca90613d38565b600081815261010060209081526040808320805460ff191660011790556001600160a01b038716835260fb90915290205461127a9083612df2565b6001600160a01b03808616600090815260fb6020526040902091909155819086167fbf14b9fde87f6e1c29a7e0787ad1d0d64b4648d8ae63da21524d9fd0f283dd38866112c78787612e05565b604080516001600160a01b0390931683526020830191909152810186905260600160405180910390a36040516340c10f1960e01b81526001600160a01b038516906340c10f199061131e9030908790600401613d88565b600060405180830381600087803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b50505050611367856111548486612e0590919063ffffffff16565b60fd5415801590611379575060fd5447115b156111655760fd546040516001600160a01b0387169190600081818185875af1925050503d80600081146113c9576040519150601f19603f3d011682016040523d82523d6000602084013e6113ce565b606091505b50505050506001609755505050565b6000828152606560205260409020600101546113f98133612f0d565b6114038383612f71565b505050565b6001600160a01b03811633146114785760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107ca565b6114828282612ff7565b5050565b600260975414156114a95760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff16156114d15760405162461bcd60e51b81526004016107ca90613ca0565b604080518781526001600160a01b03878116602083015291810186905260ff851660608201526080810184905260a08101839052908816907f9a7024cde1920aa50cdde09ca396229e8c4d530d5cfdc6233590def70a94408c9060c00160405180910390a260405163079cc67960e41b81526001600160a01b038616906379cc6790906115649033908890600401613d88565b600060405180830381600087803b15801561157e57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b600260975414156115b55760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff16156115dd5760405162461bcd60e51b81526004016107ca90613ca0565b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0388169063dd62ed3e90604401602060405180830381865afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190613d6f565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038916906370a0823190602401602060405180830381865afa158015611698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bc9190613d6f565b905060008183116116cd57826116cf565b815b90508a6001600160a01b03167f0451376d6756ee18be892f283ef4c898db362a685eef07cbb80f64db97d30dd58b8b848c8c8c8c8c604051611718989796959493929190613e4e565b60405180910390a2610e3e6001600160a01b038a1633308461305e565b61174d60008051602061426683398151915233611c53565b6117695760405162461bcd60e51b81526004016107ca90613ea5565b611771613096565b565b61177e600033611c53565b6117b65760405162461bcd60e51b81526020600482015260096024820152682737ba1030b236b4b760b91b60448201526064016107ca565b60ff80546001600160a01b0319166001600160a01b0392909216919091179055565b600260975414156117fb5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff16156118235760405162461bcd60e51b81526004016107ca90613ca0565b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0383169063dd62ed3e90604401602060405180830381865afa158015611870573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118949190613d6f565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156118de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119029190613d6f565b905060008183116119135782611915565b815b604080518781526001600160a01b0387811660208301529181018390529192508716907fda5273705dbef4bf1b902a131c2eac086b7e1476a8ab0cb4da08af1fe1bd8e3b9060600160405180910390a261197a6001600160a01b03851633308461305e565b5050600160975550505050565b600054610100900460ff166119a25760005460ff16156119a6565b303b155b611a095760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107ca565b600054610100900460ff16158015611a2b576000805461ffff19166101011790555b4360fc55611a3a600033613129565b611a42613133565b8015611a54576000805461ff00191690555b50565b60026097541415611a7a5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615611aa25760405162461bcd60e51b81526004016107ca90613ca0565b876001600160a01b03167f91f25e9be0134ec851830e0e76dc71e06f9dade75a9b84e9524071dbbc31942588888888888888604051611ae79796959493929190613ecd565b60405180910390a260405163079cc67960e41b81526001600160a01b038716906379cc679090611b1d9033908990600401613d88565b600060405180830381600087803b158015611b3757600080fd5b505af1158015611b4b573d6000803e3d6000fd5b5050600160975550505050505050505050565b611b7660008051602061426683398151915233611c53565b611b925760405162461bcd60e51b81526004016107ca90613ea5565b611771613172565b60026097541415611bbd5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615611be55760405162461bcd60e51b81526004016107ca90613ca0565b604080518481526001600160a01b038481166020830152918101839052908516907fda5273705dbef4bf1b902a131c2eac086b7e1476a8ab0cb4da08af1fe1bd8e3b9060600160405180910390a2611c486001600160a01b03831633308461305e565b505060016097555050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60026097541415611ca15760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615611cc95760405162461bcd60e51b81526004016107ca90613ca0565b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0388169063dd62ed3e90604401602060405180830381865afa158015611d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3a9190613d6f565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038916906370a0823190602401602060405180830381865afa158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da89190613d6f565b90506000818311611db95782611dbb565b815b90508a6001600160a01b03167fca7b49b34ee9c6923224bdfb212fc1fa849fadd45a711a7616a966540c004adb8b8b848c8c8c8c8c604051611e04989796959493929190613e4e565b60405180910390a260405163079cc67960e41b81526001600160a01b038a16906379cc679090611e3a9033908590600401613d88565b600060405180830381600087803b158015611e5457600080fd5b505af1158015611e68573d6000803e3d6000fd5b5050600160975550505050505050505050505050565b60026097541415611ea15760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615611ec95760405162461bcd60e51b81526004016107ca90613ca0565b876001600160a01b03167f79c15604b92ef54d3f61f0c40caab8857927ca3d5092367163b4562c1699eb5f88888888888888604051611f0e9796959493929190613ecd565b60405180910390a2611f2b6001600160a01b03871633308861305e565b50506001609755505050505050565b611f45600033611c53565b611f7d5760405162461bcd60e51b81526020600482015260096024820152682737ba1030b236b4b760b91b60448201526064016107ca565b60fe80546001600160a01b0319166001600160a01b0392909216919091179055565b611fb760008051602061426683398151915233611c53565b611fd35760405162461bcd60e51b81526004016107ca90613ea5565b60fd55565b60026097541415611ffb5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff16156120235760405162461bcd60e51b81526004016107ca90613ca0565b61202e8484836131ca565b61203661326b565b1561208f5760fd546040516001600160a01b0388169190600081818185875af1925050503d8060008114612086576040519150601f19603f3d011682016040523d82523d6000602084013e61208b565b606091505b5050505b6001600160a01b038516600090815260fb60205260409020546120b29084612df2565b6001600160a01b038616600090815260fb60205260408120919091556120d88585612e05565b60ff549091506120f5906001600160a01b03888116911683612eee565b600061210388878787613286565b9050801561218357826001600160a01b0389167f3c3ab8c782be0bd06b260569fb257c56db46897c1c3a75bb58a71424901ee93c896121428a8a612e05565b8961214d8a80613f09565b61215a60208d018d613f09565b8d60400135600160405161217699989796959493929190613f53565b60405180910390a3611f2b565b60ff546121b0906001600160a01b03168961219e8989612e05565b6001600160a01b038b1692919061305e565b826001600160a01b0389167f3c3ab8c782be0bd06b260569fb257c56db46897c1c3a75bb58a71424901ee93c896121e78a8a612e05565b896121f28a80613f09565b6121ff60208d018d613f09565b8d60400135600160405161221b99989796959493929190613f53565b60405180910390a350506001609755505050505050565b600260975414156122555760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff161561227d5760405162461bcd60e51b81526004016107ca90613ca0565b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0383169063dd62ed3e90604401602060405180830381865afa1580156122ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ee9190613d6f565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235c9190613d6f565b9050600081831161236d578261236f565b815b604080518781526001600160a01b0387811660208301529181018390529192508716907fdc5bad4651c5fbe9977a696aadc65996c468cde1448dd468ec0d83bf61c4b57c9060600160405180910390a260405163079cc67960e41b81526001600160a01b038516906379cc6790906123ed9033908590600401613d88565b600060405180830381600087803b15801561240757600080fd5b505af115801561241b573d6000803e3d6000fd5b505060016097555050505050505050565b6000828152606560205260409020600101546124488133612f0d565b6114038383612ff7565b600260975414156124755760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff161561249d5760405162461bcd60e51b81526004016107ca90613ca0565b6124b56000805160206142a683398151915233611c53565b6124d15760405162461bcd60e51b81526004016107ca90613cca565b8587116124f05760405162461bcd60e51b81526004016107ca90613d01565b6000818152610100602052604090205460ff16156125205760405162461bcd60e51b81526004016107ca90613d38565b600081815261010060209081526040808320805460ff191660011790556001600160a01b038b16835260fb90915290205461255b9087612df2565b6001600160a01b03808a16600090815260fb6020526040812092909255861663342a87a16125898a8a612e05565b6040516001600160e01b031960e084901b168152600481019190915260ff88166024820152604401602060405180830381865afa1580156125ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f29190613d6f565b90508381106127fd5761261a866126098a8a612e05565b6001600160a01b038c169190612e11565b6001600160a01b038616633e3a15606126338a8a612e05565b6040516001600160e01b031960e084901b168152600481019190915260ff8816602482015260448101879052606481018690526084016020604051808303816000875af19250505080156126a4575060408051601f3d908101601f191682019092526126a191810190613d6f565b60015b612724576126c78a6126b68a8a612e05565b6001600160a01b038c169190612eee565b816001600160a01b038b167fc1a608d0f8122d014d03cc915a91d98cef4ebaf31ea3552320430cba05211b6d8b6126fe8c8c612e05565b8b8a8a8a60006040516127179796959493929190613fb2565b60405180910390a361241b565b60405162415c3360e91b815260ff871660048201526000906001600160a01b038916906382b8660090602401602060405180830381865afa15801561276d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127919190613de8565b90506127a76001600160a01b0382168d84612eee565b838c6001600160a01b03167fc1a608d0f8122d014d03cc915a91d98cef4ebaf31ea3552320430cba05211b6d8d858d8c8c8c60016040516127ee9796959493929190613fb2565b60405180910390a3505061241b565b61280b8a6126b68a8a612e05565b816001600160a01b038b167fc1a608d0f8122d014d03cc915a91d98cef4ebaf31ea3552320430cba05211b6d8b6128428c8c612e05565b8b8a8a8a600060405161285b9796959493929190613fb2565b60405180910390a3505060016097555050505050505050565b61288c60008051602061426683398151915233611c53565b6128a85760405162461bcd60e51b81526004016107ca90613ea5565b60005b8181101561140357600161010060008585858181106128cc576128cc613ff2565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550806129029061401e565b90506128ab565b60c95460ff161561292c5760405162461bcd60e51b81526004016107ca90613ca0565b61294460008051602061426683398151915233611c53565b6129605760405162461bcd60e51b81526004016107ca90613ea5565b6001600160a01b0381166129a95760405162461bcd60e51b815260206004820152601060248201526f0416464726573732069732030783030360841b60448201526064016107ca565b6001600160a01b038216600090815260fb602052604090205415611482576001600160a01b038216600081815260fb60205260409020546129ec91908390612eee565b506001600160a01b0316600090815260fb6020526040812055565b60026097541415612a2a5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615612a525760405162461bcd60e51b81526004016107ca90613ca0565b604080518481526001600160a01b038481166020830152918101839052908516907fdc5bad4651c5fbe9977a696aadc65996c468cde1448dd468ec0d83bf61c4b57c9060600160405180910390a260405163079cc67960e41b81526001600160a01b038316906379cc679090612ace9033908590600401613d88565b600060405180830381600087803b158015612ae857600080fd5b505af1158015611f2b573d6000803e3d6000fd5b60026097541415612b1f5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615612b475760405162461bcd60e51b81526004016107ca90613ca0565b612b528484836131ca565b6001600160a01b038516600090815260fb6020526040902054612b759084612df2565b6001600160a01b038616600090815260fb6020526040902055612b9661326b565b15612bef5760fd546040516001600160a01b0388169190600081818185875af1925050503d8060008114612be6576040519150601f19603f3d011682016040523d82523d6000602084013e612beb565b606091505b5050505b60ff546040516340c10f1960e01b81526001600160a01b03878116926340c10f1992612c2392909116908890600401613d88565b600060405180830381600087803b158015612c3d57600080fd5b505af1158015612c51573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03881692506340c10f199150612c839030908790600401613d88565b600060405180830381600087803b158015612c9d57600080fd5b505af1158015612cb1573d6000803e3d6000fd5b505050506000612cc387868686613286565b90508015612d4357816001600160a01b0388167ff663aaa72454b2aec7a5bca072f85835e73b3714f4fb75586d80991b49450b7388612d028989612e05565b88612d0d8980613f09565b612d1a60208c018c613f09565b8c604001356001604051612d3699989796959493929190613f53565b60405180910390a3612de4565b60ff54612d70906001600160a01b031688612d5e8888612e05565b6001600160a01b038a1692919061305e565b816001600160a01b0388167ff663aaa72454b2aec7a5bca072f85835e73b3714f4fb75586d80991b49450b7388612da78989612e05565b88612db28980613f09565b612dbf60208c018c613f09565b8c604001356000604051612ddb99989796959493929190613f53565b60405180910390a35b505060016097555050505050565b6000612dfe8284614039565b9392505050565b6000612dfe8284614051565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e869190613d6f565b612e909190614039565b9050612ee88463095ea7b360e01b8584604051602401612eb1929190613d88565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613326565b50505050565b6114038363a9059cbb60e01b8484604051602401612eb1929190613d88565b612f178282611c53565b61148257612f2f816001600160a01b031660146133f8565b612f3a8360206133f8565b604051602001612f4b929190614094565b60408051601f198184030181529082905262461bcd60e51b82526107ca91600401614109565b612f7b8282611c53565b6114825760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612fb33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6130018282611c53565b156114825760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b0380851660248301528316604482015260648101829052612ee89085906323b872dd60e01b90608401612eb1565b60c95460ff166130df5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107ca565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6114828282612f71565b600054610100900460ff1661315a5760405162461bcd60e51b81526004016107ca9061413c565b613162613594565b61316a613594565b611771613594565b60c95460ff16156131955760405162461bcd60e51b81526004016107ca90613ca0565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861310c3390565b6131e26000805160206142a683398151915233611c53565b6131fe5760405162461bcd60e51b81526004016107ca90613cca565b81831161321d5760405162461bcd60e51b81526004016107ca90613d01565b6000818152610100602052604090205460ff161561324d5760405162461bcd60e51b81526004016107ca90613d38565b600090815261010060205260409020805460ff191660011790555050565b600060fd54600014158015613281575060fd5447115b905090565b60ff546000906001600160a01b0316631a9653356132a48686612e05565b60006132b08680613f09565b6132bd6020890189613f09565b8c60006040518963ffffffff1660e01b81526004016132e3989796959493929190614187565b600060405180830381600087803b1580156132fd57600080fd5b505af192505050801561330e575060015b61331a5750600061331e565b5060015b949350505050565b600061337b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135bb9092919063ffffffff16565b805190915015611403578080602001905181019061339991906141db565b6114035760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107ca565b606060006134078360026141fd565b613412906002614039565b67ffffffffffffffff81111561342a5761342a61421c565b6040519080825280601f01601f191660200182016040528015613454576020820181803683370190505b509050600360fc1b8160008151811061346f5761346f613ff2565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061349e5761349e613ff2565b60200101906001600160f81b031916908160001a90535060006134c28460026141fd565b6134cd906001614039565b90505b6001811115613545576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061350157613501613ff2565b1a60f81b82828151811061351757613517613ff2565b60200101906001600160f81b031916908160001a90535060049490941c9361353e81614232565b90506134d0565b508315612dfe5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107ca565b600054610100900460ff166117715760405162461bcd60e51b81526004016107ca9061413c565b606061331e848460008585843b6136145760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ca565b600080866001600160a01b031685876040516136309190614249565b60006040518083038185875af1925050503d806000811461366d576040519150601f19603f3d011682016040523d82523d6000602084013e613672565b606091505b509150915061368282828661368d565b979650505050505050565b6060831561369c575081612dfe565b8251156136ac5782518084602001fd5b8160405162461bcd60e51b81526004016107ca9190614109565b6000602082840312156136d857600080fd5b81356001600160e01b031981168114612dfe57600080fd5b6001600160a01b0381168114611a5457600080fd5b803560ff8116811461371657600080fd5b919050565b6000806000806000806000806000806101408b8d03121561373b57600080fd5b8a35613746816136f0565b995060208b0135613756816136f0565b985060408b0135975060608b0135965060808b0135613774816136f0565b955061378260a08c01613705565b945061379060c08c01613705565b935060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b600080600080600060a086880312156137d057600080fd5b85356137db816136f0565b945060208601356137eb816136f0565b94979496505050506040830135926060810135926080909101359150565b60006020828403121561381b57600080fd5b5035919050565b6000806040838503121561383557600080fd5b823591506020830135613847816136f0565b809150509250929050565b600080600080600080600060e0888a03121561386d57600080fd5b8735613878816136f0565b965060208801359550604088013561388f816136f0565b9450606088013593506138a460808901613705565b925060a0880135915060c0880135905092959891949750929550565b60008083601f8401126138d257600080fd5b50813567ffffffffffffffff8111156138ea57600080fd5b6020830191508360208260051b850101111561390557600080fd5b9250929050565b60008060008060008060008060c0898b03121561392857600080fd5b8835613933816136f0565b975060208901359650604089013561394a816136f0565b9550606089013567ffffffffffffffff8082111561396757600080fd5b6139738c838d016138c0565b909750955060808b013591508082111561398c57600080fd5b506139998b828c016138c0565b999c989b50969995989497949560a00135949350505050565b6000602082840312156139c457600080fd5b8135612dfe816136f0565b6000806000606084860312156139e457600080fd5b83356139ef816136f0565b9250602084013591506040840135613a06816136f0565b809150509250925092565b600080600080600080600080610100898b031215613a2e57600080fd5b8835613a39816136f0565b9750602089013596506040890135613a50816136f0565b955060608901359450613a6560808a01613705565b9350613a7360a08a01613705565b925060c0890135915060e089013590509295985092959890939650565b60008060008060808587031215613aa657600080fd5b8435613ab1816136f0565b9350602085013592506040850135613ac8816136f0565b9396929550929360600135925050565b600060608284031215613aea57600080fd5b50919050565b60008060008060008060c08789031215613b0957600080fd5b8635613b14816136f0565b95506020870135613b24816136f0565b94506040870135935060608701359250608087013567ffffffffffffffff811115613b4e57600080fd5b613b5a89828a01613ad8565b92505060a087013590509295509295509295565b60008060008060008060008060006101208a8c031215613b8d57600080fd5b8935613b98816136f0565b985060208a0135613ba8816136f0565b975060408a0135965060608a0135955060808a0135613bc6816136f0565b9450613bd460a08b01613705565b935060c08a0135925060e08a013591506101008a013590509295985092959850929598565b60008060208385031215613c0c57600080fd5b823567ffffffffffffffff811115613c2357600080fd5b613c2f858286016138c0565b90969095509350505050565b60008060408385031215613c4e57600080fd5b8235613c59816136f0565b91506020830135613847816136f0565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742061206e6f64652067726f7570000000000000604082015260600190565b6020808252601f908201527f416d6f756e74206d7573742062652067726561746572207468616e2066656500604082015260600190565b60208082526018908201527f4b6170706120697320616c72656164792070726573656e740000000000000000604082015260600190565b600060208284031215613d8157600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039890981688526020880196909652604087019490945260ff92831660608701529116608085015260a084015260c0830152151560e08201526101000190565b600060208284031215613dfa57600080fd5b8151612dfe816136f0565b8183526000602080850194508260005b85811015613e43578135613e28816136f0565b6001600160a01b031687529582019590820190600101613e15565b509495945050505050565b88815260018060a01b038816602082015286604082015260c060608201526000613e7c60c083018789613e05565b8281036080840152613e8f818688613e05565b9150508260a08301529998505050505050505050565b6020808252600e908201526d4e6f7420676f7665726e616e636560901b604082015260600190565b9687526001600160a01b03959095166020870152604086019390935260ff918216606086015216608084015260a083015260c082015260e00190565b6000808335601e19843603018112613f2057600080fd5b83018035915067ffffffffffffffff821115613f3b57600080fd5b6020019150600581901b360382131561390557600080fd5b60018060a01b038a16815288602082015287604082015260e060608201526000613f8160e08301888a613e05565b8281036080840152613f94818789613e05565b60a0840195909552505090151560c090910152979650505050505050565b6001600160a01b039790971687526020870195909552604086019390935260ff919091166060850152608084015260a0830152151560c082015260e00190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561403257614032614008565b5060010190565b6000821982111561404c5761404c614008565b500190565b60008282101561406357614063614008565b500390565b60005b8381101561408357818101518382015260200161406b565b83811115612ee85750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516140cc816017850160208801614068565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516140fd816028840160208801614068565b01602801949350505050565b6020815260008251806020840152614128816040850160208701614068565b601f01601f19169190910160400192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b88815287602082015260c0604082015260006141a760c08301888a613e05565b82810360608401526141ba818789613e05565b6001600160a01b03959095166080840152505060a001529695505050505050565b6000602082840312156141ed57600080fd5b81518015158114612dfe57600080fd5b600081600019048311821515161561421757614217614008565b500290565b634e487b7160e01b600052604160045260246000fd5b60008161424157614241614008565b506000190190565b6000825161425b818460208701614068565b919091019291505056fe71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb14f56ec39e98539920503fd54ee56ae0cbebe9eb15aa778f18de67701eeae7c65b5c00e6706c3d213edd70ff33717fac657eacc5fe161f07180cf1fcab13cc4cda264697066735822122010bea104f9a73688483dcf9f3a9b9563e0008d032914936915e4c4d4e8a9faee64736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061023f5760003560e01c806390d250741161012e578063c78f6803116100ab578063f25552781161006f578063f2555278146106cc578063f36c8f5c146106ec578063f3befd011461070e578063f3f094a114610730578063fb169ff01461075057600080fd5b8063c78f680314610620578063d547741f14610656578063d57eafac14610676578063e00a83e014610696578063e7a59998146106ac57600080fd5b8063a96e2423116100f2578063a96e24231461058b578063ac865626146105ab578063b250fe6b146105c0578063b2e97f11146105e0578063bcaeea5e1461060057600080fd5b806390d25074146104f657806391d1485414610516578063a06fec1b14610536578063a217fddf14610556578063a2a2af0b1461056b57600080fd5b806336e712ed116101bc5780635198c366116101805780635198c366146104745780635c975abb146104945780638129fc1c146104ac578063839ed90a146104c15780638456cb59146104e157600080fd5b806336e712ed146103e9578063381d86e3146104095780633f4ba83a1461042957806341cb87fc1461043e578063498a4c2d1461045e57600080fd5b8063248a9ca311610203578063248a9ca31461031a5780632f2ff15d146103585780632fe87b951461037857806332fe7b26146103a957806336568abe146103c957600080fd5b806301ffc9a71461024b578063040141e51461028057806317357892146102b85780631cf5f07f146102da57806320d7b327146102fa57600080fd5b3661024657005b600080fd5b34801561025757600080fd5b5061026b6102663660046136c6565b610770565b60405190151581526020015b60405180910390f35b34801561028c57600080fd5b5060fe546102a0906001600160a01b031681565b6040516001600160a01b039091168152602001610277565b3480156102c457600080fd5b506102d86102d336600461371b565b6107a7565b005b3480156102e657600080fd5b506102d86102f53660046137b8565b610e50565b34801561030657600080fd5b506102d86103153660046137b8565b611171565b34801561032657600080fd5b5061034a610335366004613809565b60009081526065602052604090206001015490565b604051908152602001610277565b34801561036457600080fd5b506102d8610373366004613822565b6113dd565b34801561038457600080fd5b5061026b610393366004613809565b6000908152610100602052604090205460ff1690565b3480156103b557600080fd5b5060ff546102a0906001600160a01b031681565b3480156103d557600080fd5b506102d86103e4366004613822565b611408565b3480156103f557600080fd5b506102d8610404366004613852565b611486565b34801561041557600080fd5b506102d861042436600461390c565b611592565b34801561043557600080fd5b506102d8611735565b34801561044a57600080fd5b506102d86104593660046139b2565b611773565b34801561046a57600080fd5b5061034a60fc5481565b34801561048057600080fd5b506102d861048f3660046139cf565b6117d8565b3480156104a057600080fd5b5060c95460ff1661026b565b3480156104b857600080fd5b506102d8611987565b3480156104cd57600080fd5b506102d86104dc366004613a11565b611a57565b3480156104ed57600080fd5b506102d8611b5e565b34801561050257600080fd5b506102d8610511366004613a90565b611b9a565b34801561052257600080fd5b5061026b610531366004613822565b611c53565b34801561054257600080fd5b506102d861055136600461390c565b611c7e565b34801561056257600080fd5b5061034a600081565b34801561057757600080fd5b506102d8610586366004613a11565b611e7e565b34801561059757600080fd5b506102d86105a63660046139b2565b611f3a565b3480156105b757600080fd5b5061034a600681565b3480156105cc57600080fd5b506102d86105db366004613809565b611f9f565b3480156105ec57600080fd5b506102d86105fb366004613af0565b611fd8565b34801561060c57600080fd5b506102d861061b3660046139cf565b612232565b34801561062c57600080fd5b5061034a61063b3660046139b2565b6001600160a01b0316600090815260fb602052604090205490565b34801561066257600080fd5b506102d8610671366004613822565b61242c565b34801561068257600080fd5b506102d8610691366004613b6e565b612452565b3480156106a257600080fd5b5061034a60fd5481565b3480156106b857600080fd5b506102d86106c7366004613bf9565b612874565b3480156106d857600080fd5b506102d86106e7366004613c3b565b612909565b3480156106f857600080fd5b5061034a60008051602061426683398151915281565b34801561071a57600080fd5b5061034a6000805160206142a683398151915281565b34801561073c57600080fd5b506102d861074b366004613a90565b612a07565b34801561075c57600080fd5b506102d861076b366004613af0565b612afc565b60006001600160e01b03198216637965db0b60e01b14806107a157506301ffc9a760e01b6001600160e01b03198316145b92915050565b600260975414156107d35760405162461bcd60e51b81526004016107ca90613c69565b60405180910390fd5b600260975560c95460ff16156107fb5760405162461bcd60e51b81526004016107ca90613ca0565b6108136000805160206142a683398151915233611c53565b61082f5760405162461bcd60e51b81526004016107ca90613cca565b86881161084e5760405162461bcd60e51b81526004016107ca90613d01565b6000818152610100602052604090205460ff161561087e5760405162461bcd60e51b81526004016107ca90613d38565b600081815261010060209081526040808320805460ff191660011790556001600160a01b038c16835260fb9091529020546108b99088612df2565b6001600160a01b038a16600090815260fb602052604090205560fd54158015906108e4575060fd5447115b1561093d5760fd546040516001600160a01b038c169190600081818185875af1925050503d8060008114610934576040519150601f19603f3d011682016040523d82523d6000602084013e610939565b606091505b5050505b60006001600160a01b03871663a95b089f878761095a8d8d612e05565b6040516001600160e01b031960e086901b16815260ff93841660048201529290911660248301526044820152606401602060405180830381865afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190613d6f565b9050838110610d7e576040516340c10f1960e01b81526001600160a01b038b16906340c10f1990610a019030908d90600401613d88565b600060405180830381600087803b158015610a1b57600080fd5b505af1158015610a2f573d6000803e3d6000fd5b50610a48925050506001600160a01b038b16888b612e11565b6001600160a01b03871663916955868787610a638d8d612e05565b6040516001600160e01b031960e086901b16815260ff93841660048201529290911660248301526044820152606481018790526084810186905260a4016020604051808303816000875af1925050508015610adb575060408051601f3d908101601f19168201909252610ad891810190613d6f565b60015b610b4b57610afe8b610aed8b8b612e05565b6001600160a01b038d169190612eee565b816001600160a01b038c166000805160206142868339815191528c610b238d8d612e05565b8c8b8b8b8b6000604051610b3e989796959493929190613da1565b60405180910390a3610e3e565b60405162415c3360e91b815260ff871660048201526000906001600160a01b038a16906382b8660090602401602060405180830381865afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190613de8565b60fe549091506001600160a01b038083169116148015610be2575060fe546001600160a01b031615155b15610d235760fe54604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015610c2d57600080fd5b505af1158015610c41573d6000803e3d6000fd5b5050505060008d6001600160a01b03168360405160006040518083038185875af1925050503d8060008114610c92576040519150601f19603f3d011682016040523d82523d6000602084013e610c97565b606091505b5050905080610cde5760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016107ca565b848e6001600160a01b03166000805160206142868339815191528f868f8e8e8e8e6001604051610d15989796959493929190613da1565b60405180910390a350610d77565b610d376001600160a01b0382168e84612eee565b838d6001600160a01b03166000805160206142868339815191528e858e8d8d8d8d6001604051610d6e989796959493929190613da1565b60405180910390a35b5050610e3e565b6040516340c10f1960e01b81526001600160a01b038b16906340c10f1990610dac9030908d90600401613d88565b600060405180830381600087803b158015610dc657600080fd5b505af1158015610dda573d6000803e3d6000fd5b50505050610df58b610aed8a8c612e0590919063ffffffff16565b816001600160a01b038c166000805160206142868339815191528c610e1a8d8d612e05565b8c8b8b8b8b6000604051610e35989796959493929190613da1565b60405180910390a35b50506001609755505050505050505050565b60026097541415610e735760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615610e9b5760405162461bcd60e51b81526004016107ca90613ca0565b610eb36000805160206142a683398151915233611c53565b610ecf5760405162461bcd60e51b81526004016107ca90613cca565b818311610eee5760405162461bcd60e51b81526004016107ca90613d01565b6000818152610100602052604090205460ff1615610f1e5760405162461bcd60e51b81526004016107ca90613d38565b600081815261010060209081526040808320805460ff191660011790556001600160a01b038716835260fb909152902054610f599083612df2565b6001600160a01b03808616600081815260fb602052604090209290925560fe5416148015610f91575060fe546001600160a01b031615155b156110f65760fe546001600160a01b0316632e1a7d4d610fb18585612e05565b6040518263ffffffff1660e01b8152600401610fcf91815260200190565b600060405180830381600087803b158015610fe957600080fd5b505af1158015610ffd573d6000803e3d6000fd5b506000925050506001600160a01b0386166110188585612e05565b604051600081818185875af1925050503d8060008114611054576040519150601f19603f3d011682016040523d82523d6000602084013e611059565b606091505b50509050806110a05760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016107ca565b604080516001600160a01b0387811682526020820187905291810185905283918816907f8b0afdc777af6946e53045a4a75212769075d30455a212ac51c9b16f9c5c9b269060600160405180910390a350611165565b604080516001600160a01b0386811682526020820186905291810184905282918716907f8b0afdc777af6946e53045a4a75212769075d30455a212ac51c9b16f9c5c9b269060600160405180910390a3611165856111548585612e05565b6001600160a01b0387169190612eee565b50506001609755505050565b600260975414156111945760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff16156111bc5760405162461bcd60e51b81526004016107ca90613ca0565b6111d46000805160206142a683398151915233611c53565b6111f05760405162461bcd60e51b81526004016107ca90613cca565b81831161120f5760405162461bcd60e51b81526004016107ca90613d01565b6000818152610100602052604090205460ff161561123f5760405162461bcd60e51b81526004016107ca90613d38565b600081815261010060209081526040808320805460ff191660011790556001600160a01b038716835260fb90915290205461127a9083612df2565b6001600160a01b03808616600090815260fb6020526040902091909155819086167fbf14b9fde87f6e1c29a7e0787ad1d0d64b4648d8ae63da21524d9fd0f283dd38866112c78787612e05565b604080516001600160a01b0390931683526020830191909152810186905260600160405180910390a36040516340c10f1960e01b81526001600160a01b038516906340c10f199061131e9030908790600401613d88565b600060405180830381600087803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b50505050611367856111548486612e0590919063ffffffff16565b60fd5415801590611379575060fd5447115b156111655760fd546040516001600160a01b0387169190600081818185875af1925050503d80600081146113c9576040519150601f19603f3d011682016040523d82523d6000602084013e6113ce565b606091505b50505050506001609755505050565b6000828152606560205260409020600101546113f98133612f0d565b6114038383612f71565b505050565b6001600160a01b03811633146114785760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107ca565b6114828282612ff7565b5050565b600260975414156114a95760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff16156114d15760405162461bcd60e51b81526004016107ca90613ca0565b604080518781526001600160a01b03878116602083015291810186905260ff851660608201526080810184905260a08101839052908816907f9a7024cde1920aa50cdde09ca396229e8c4d530d5cfdc6233590def70a94408c9060c00160405180910390a260405163079cc67960e41b81526001600160a01b038616906379cc6790906115649033908890600401613d88565b600060405180830381600087803b15801561157e57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b600260975414156115b55760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff16156115dd5760405162461bcd60e51b81526004016107ca90613ca0565b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0388169063dd62ed3e90604401602060405180830381865afa15801561162a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164e9190613d6f565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038916906370a0823190602401602060405180830381865afa158015611698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bc9190613d6f565b905060008183116116cd57826116cf565b815b90508a6001600160a01b03167f0451376d6756ee18be892f283ef4c898db362a685eef07cbb80f64db97d30dd58b8b848c8c8c8c8c604051611718989796959493929190613e4e565b60405180910390a2610e3e6001600160a01b038a1633308461305e565b61174d60008051602061426683398151915233611c53565b6117695760405162461bcd60e51b81526004016107ca90613ea5565b611771613096565b565b61177e600033611c53565b6117b65760405162461bcd60e51b81526020600482015260096024820152682737ba1030b236b4b760b91b60448201526064016107ca565b60ff80546001600160a01b0319166001600160a01b0392909216919091179055565b600260975414156117fb5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff16156118235760405162461bcd60e51b81526004016107ca90613ca0565b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0383169063dd62ed3e90604401602060405180830381865afa158015611870573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118949190613d6f565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156118de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119029190613d6f565b905060008183116119135782611915565b815b604080518781526001600160a01b0387811660208301529181018390529192508716907fda5273705dbef4bf1b902a131c2eac086b7e1476a8ab0cb4da08af1fe1bd8e3b9060600160405180910390a261197a6001600160a01b03851633308461305e565b5050600160975550505050565b600054610100900460ff166119a25760005460ff16156119a6565b303b155b611a095760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107ca565b600054610100900460ff16158015611a2b576000805461ffff19166101011790555b4360fc55611a3a600033613129565b611a42613133565b8015611a54576000805461ff00191690555b50565b60026097541415611a7a5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615611aa25760405162461bcd60e51b81526004016107ca90613ca0565b876001600160a01b03167f91f25e9be0134ec851830e0e76dc71e06f9dade75a9b84e9524071dbbc31942588888888888888604051611ae79796959493929190613ecd565b60405180910390a260405163079cc67960e41b81526001600160a01b038716906379cc679090611b1d9033908990600401613d88565b600060405180830381600087803b158015611b3757600080fd5b505af1158015611b4b573d6000803e3d6000fd5b5050600160975550505050505050505050565b611b7660008051602061426683398151915233611c53565b611b925760405162461bcd60e51b81526004016107ca90613ea5565b611771613172565b60026097541415611bbd5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615611be55760405162461bcd60e51b81526004016107ca90613ca0565b604080518481526001600160a01b038481166020830152918101839052908516907fda5273705dbef4bf1b902a131c2eac086b7e1476a8ab0cb4da08af1fe1bd8e3b9060600160405180910390a2611c486001600160a01b03831633308461305e565b505060016097555050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60026097541415611ca15760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615611cc95760405162461bcd60e51b81526004016107ca90613ca0565b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0388169063dd62ed3e90604401602060405180830381865afa158015611d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3a9190613d6f565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038916906370a0823190602401602060405180830381865afa158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da89190613d6f565b90506000818311611db95782611dbb565b815b90508a6001600160a01b03167fca7b49b34ee9c6923224bdfb212fc1fa849fadd45a711a7616a966540c004adb8b8b848c8c8c8c8c604051611e04989796959493929190613e4e565b60405180910390a260405163079cc67960e41b81526001600160a01b038a16906379cc679090611e3a9033908590600401613d88565b600060405180830381600087803b158015611e5457600080fd5b505af1158015611e68573d6000803e3d6000fd5b5050600160975550505050505050505050505050565b60026097541415611ea15760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615611ec95760405162461bcd60e51b81526004016107ca90613ca0565b876001600160a01b03167f79c15604b92ef54d3f61f0c40caab8857927ca3d5092367163b4562c1699eb5f88888888888888604051611f0e9796959493929190613ecd565b60405180910390a2611f2b6001600160a01b03871633308861305e565b50506001609755505050505050565b611f45600033611c53565b611f7d5760405162461bcd60e51b81526020600482015260096024820152682737ba1030b236b4b760b91b60448201526064016107ca565b60fe80546001600160a01b0319166001600160a01b0392909216919091179055565b611fb760008051602061426683398151915233611c53565b611fd35760405162461bcd60e51b81526004016107ca90613ea5565b60fd55565b60026097541415611ffb5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff16156120235760405162461bcd60e51b81526004016107ca90613ca0565b61202e8484836131ca565b61203661326b565b1561208f5760fd546040516001600160a01b0388169190600081818185875af1925050503d8060008114612086576040519150601f19603f3d011682016040523d82523d6000602084013e61208b565b606091505b5050505b6001600160a01b038516600090815260fb60205260409020546120b29084612df2565b6001600160a01b038616600090815260fb60205260408120919091556120d88585612e05565b60ff549091506120f5906001600160a01b03888116911683612eee565b600061210388878787613286565b9050801561218357826001600160a01b0389167f3c3ab8c782be0bd06b260569fb257c56db46897c1c3a75bb58a71424901ee93c896121428a8a612e05565b8961214d8a80613f09565b61215a60208d018d613f09565b8d60400135600160405161217699989796959493929190613f53565b60405180910390a3611f2b565b60ff546121b0906001600160a01b03168961219e8989612e05565b6001600160a01b038b1692919061305e565b826001600160a01b0389167f3c3ab8c782be0bd06b260569fb257c56db46897c1c3a75bb58a71424901ee93c896121e78a8a612e05565b896121f28a80613f09565b6121ff60208d018d613f09565b8d60400135600160405161221b99989796959493929190613f53565b60405180910390a350506001609755505050505050565b600260975414156122555760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff161561227d5760405162461bcd60e51b81526004016107ca90613ca0565b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0383169063dd62ed3e90604401602060405180830381865afa1580156122ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ee9190613d6f565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061235c9190613d6f565b9050600081831161236d578261236f565b815b604080518781526001600160a01b0387811660208301529181018390529192508716907fdc5bad4651c5fbe9977a696aadc65996c468cde1448dd468ec0d83bf61c4b57c9060600160405180910390a260405163079cc67960e41b81526001600160a01b038516906379cc6790906123ed9033908590600401613d88565b600060405180830381600087803b15801561240757600080fd5b505af115801561241b573d6000803e3d6000fd5b505060016097555050505050505050565b6000828152606560205260409020600101546124488133612f0d565b6114038383612ff7565b600260975414156124755760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff161561249d5760405162461bcd60e51b81526004016107ca90613ca0565b6124b56000805160206142a683398151915233611c53565b6124d15760405162461bcd60e51b81526004016107ca90613cca565b8587116124f05760405162461bcd60e51b81526004016107ca90613d01565b6000818152610100602052604090205460ff16156125205760405162461bcd60e51b81526004016107ca90613d38565b600081815261010060209081526040808320805460ff191660011790556001600160a01b038b16835260fb90915290205461255b9087612df2565b6001600160a01b03808a16600090815260fb6020526040812092909255861663342a87a16125898a8a612e05565b6040516001600160e01b031960e084901b168152600481019190915260ff88166024820152604401602060405180830381865afa1580156125ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f29190613d6f565b90508381106127fd5761261a866126098a8a612e05565b6001600160a01b038c169190612e11565b6001600160a01b038616633e3a15606126338a8a612e05565b6040516001600160e01b031960e084901b168152600481019190915260ff8816602482015260448101879052606481018690526084016020604051808303816000875af19250505080156126a4575060408051601f3d908101601f191682019092526126a191810190613d6f565b60015b612724576126c78a6126b68a8a612e05565b6001600160a01b038c169190612eee565b816001600160a01b038b167fc1a608d0f8122d014d03cc915a91d98cef4ebaf31ea3552320430cba05211b6d8b6126fe8c8c612e05565b8b8a8a8a60006040516127179796959493929190613fb2565b60405180910390a361241b565b60405162415c3360e91b815260ff871660048201526000906001600160a01b038916906382b8660090602401602060405180830381865afa15801561276d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127919190613de8565b90506127a76001600160a01b0382168d84612eee565b838c6001600160a01b03167fc1a608d0f8122d014d03cc915a91d98cef4ebaf31ea3552320430cba05211b6d8d858d8c8c8c60016040516127ee9796959493929190613fb2565b60405180910390a3505061241b565b61280b8a6126b68a8a612e05565b816001600160a01b038b167fc1a608d0f8122d014d03cc915a91d98cef4ebaf31ea3552320430cba05211b6d8b6128428c8c612e05565b8b8a8a8a600060405161285b9796959493929190613fb2565b60405180910390a3505060016097555050505050505050565b61288c60008051602061426683398151915233611c53565b6128a85760405162461bcd60e51b81526004016107ca90613ea5565b60005b8181101561140357600161010060008585858181106128cc576128cc613ff2565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550806129029061401e565b90506128ab565b60c95460ff161561292c5760405162461bcd60e51b81526004016107ca90613ca0565b61294460008051602061426683398151915233611c53565b6129605760405162461bcd60e51b81526004016107ca90613ea5565b6001600160a01b0381166129a95760405162461bcd60e51b815260206004820152601060248201526f0416464726573732069732030783030360841b60448201526064016107ca565b6001600160a01b038216600090815260fb602052604090205415611482576001600160a01b038216600081815260fb60205260409020546129ec91908390612eee565b506001600160a01b0316600090815260fb6020526040812055565b60026097541415612a2a5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615612a525760405162461bcd60e51b81526004016107ca90613ca0565b604080518481526001600160a01b038481166020830152918101839052908516907fdc5bad4651c5fbe9977a696aadc65996c468cde1448dd468ec0d83bf61c4b57c9060600160405180910390a260405163079cc67960e41b81526001600160a01b038316906379cc679090612ace9033908590600401613d88565b600060405180830381600087803b158015612ae857600080fd5b505af1158015611f2b573d6000803e3d6000fd5b60026097541415612b1f5760405162461bcd60e51b81526004016107ca90613c69565b600260975560c95460ff1615612b475760405162461bcd60e51b81526004016107ca90613ca0565b612b528484836131ca565b6001600160a01b038516600090815260fb6020526040902054612b759084612df2565b6001600160a01b038616600090815260fb6020526040902055612b9661326b565b15612bef5760fd546040516001600160a01b0388169190600081818185875af1925050503d8060008114612be6576040519150601f19603f3d011682016040523d82523d6000602084013e612beb565b606091505b5050505b60ff546040516340c10f1960e01b81526001600160a01b03878116926340c10f1992612c2392909116908890600401613d88565b600060405180830381600087803b158015612c3d57600080fd5b505af1158015612c51573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b03881692506340c10f199150612c839030908790600401613d88565b600060405180830381600087803b158015612c9d57600080fd5b505af1158015612cb1573d6000803e3d6000fd5b505050506000612cc387868686613286565b90508015612d4357816001600160a01b0388167ff663aaa72454b2aec7a5bca072f85835e73b3714f4fb75586d80991b49450b7388612d028989612e05565b88612d0d8980613f09565b612d1a60208c018c613f09565b8c604001356001604051612d3699989796959493929190613f53565b60405180910390a3612de4565b60ff54612d70906001600160a01b031688612d5e8888612e05565b6001600160a01b038a1692919061305e565b816001600160a01b0388167ff663aaa72454b2aec7a5bca072f85835e73b3714f4fb75586d80991b49450b7388612da78989612e05565b88612db28980613f09565b612dbf60208c018c613f09565b8c604001356000604051612ddb99989796959493929190613f53565b60405180910390a35b505060016097555050505050565b6000612dfe8284614039565b9392505050565b6000612dfe8284614051565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015612e62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e869190613d6f565b612e909190614039565b9050612ee88463095ea7b360e01b8584604051602401612eb1929190613d88565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613326565b50505050565b6114038363a9059cbb60e01b8484604051602401612eb1929190613d88565b612f178282611c53565b61148257612f2f816001600160a01b031660146133f8565b612f3a8360206133f8565b604051602001612f4b929190614094565b60408051601f198184030181529082905262461bcd60e51b82526107ca91600401614109565b612f7b8282611c53565b6114825760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612fb33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6130018282611c53565b156114825760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b0380851660248301528316604482015260648101829052612ee89085906323b872dd60e01b90608401612eb1565b60c95460ff166130df5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107ca565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6114828282612f71565b600054610100900460ff1661315a5760405162461bcd60e51b81526004016107ca9061413c565b613162613594565b61316a613594565b611771613594565b60c95460ff16156131955760405162461bcd60e51b81526004016107ca90613ca0565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861310c3390565b6131e26000805160206142a683398151915233611c53565b6131fe5760405162461bcd60e51b81526004016107ca90613cca565b81831161321d5760405162461bcd60e51b81526004016107ca90613d01565b6000818152610100602052604090205460ff161561324d5760405162461bcd60e51b81526004016107ca90613d38565b600090815261010060205260409020805460ff191660011790555050565b600060fd54600014158015613281575060fd5447115b905090565b60ff546000906001600160a01b0316631a9653356132a48686612e05565b60006132b08680613f09565b6132bd6020890189613f09565b8c60006040518963ffffffff1660e01b81526004016132e3989796959493929190614187565b600060405180830381600087803b1580156132fd57600080fd5b505af192505050801561330e575060015b61331a5750600061331e565b5060015b949350505050565b600061337b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135bb9092919063ffffffff16565b805190915015611403578080602001905181019061339991906141db565b6114035760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107ca565b606060006134078360026141fd565b613412906002614039565b67ffffffffffffffff81111561342a5761342a61421c565b6040519080825280601f01601f191660200182016040528015613454576020820181803683370190505b509050600360fc1b8160008151811061346f5761346f613ff2565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061349e5761349e613ff2565b60200101906001600160f81b031916908160001a90535060006134c28460026141fd565b6134cd906001614039565b90505b6001811115613545576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061350157613501613ff2565b1a60f81b82828151811061351757613517613ff2565b60200101906001600160f81b031916908160001a90535060049490941c9361353e81614232565b90506134d0565b508315612dfe5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107ca565b600054610100900460ff166117715760405162461bcd60e51b81526004016107ca9061413c565b606061331e848460008585843b6136145760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107ca565b600080866001600160a01b031685876040516136309190614249565b60006040518083038185875af1925050503d806000811461366d576040519150601f19603f3d011682016040523d82523d6000602084013e613672565b606091505b509150915061368282828661368d565b979650505050505050565b6060831561369c575081612dfe565b8251156136ac5782518084602001fd5b8160405162461bcd60e51b81526004016107ca9190614109565b6000602082840312156136d857600080fd5b81356001600160e01b031981168114612dfe57600080fd5b6001600160a01b0381168114611a5457600080fd5b803560ff8116811461371657600080fd5b919050565b6000806000806000806000806000806101408b8d03121561373b57600080fd5b8a35613746816136f0565b995060208b0135613756816136f0565b985060408b0135975060608b0135965060808b0135613774816136f0565b955061378260a08c01613705565b945061379060c08c01613705565b935060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b600080600080600060a086880312156137d057600080fd5b85356137db816136f0565b945060208601356137eb816136f0565b94979496505050506040830135926060810135926080909101359150565b60006020828403121561381b57600080fd5b5035919050565b6000806040838503121561383557600080fd5b823591506020830135613847816136f0565b809150509250929050565b600080600080600080600060e0888a03121561386d57600080fd5b8735613878816136f0565b965060208801359550604088013561388f816136f0565b9450606088013593506138a460808901613705565b925060a0880135915060c0880135905092959891949750929550565b60008083601f8401126138d257600080fd5b50813567ffffffffffffffff8111156138ea57600080fd5b6020830191508360208260051b850101111561390557600080fd5b9250929050565b60008060008060008060008060c0898b03121561392857600080fd5b8835613933816136f0565b975060208901359650604089013561394a816136f0565b9550606089013567ffffffffffffffff8082111561396757600080fd5b6139738c838d016138c0565b909750955060808b013591508082111561398c57600080fd5b506139998b828c016138c0565b999c989b50969995989497949560a00135949350505050565b6000602082840312156139c457600080fd5b8135612dfe816136f0565b6000806000606084860312156139e457600080fd5b83356139ef816136f0565b9250602084013591506040840135613a06816136f0565b809150509250925092565b600080600080600080600080610100898b031215613a2e57600080fd5b8835613a39816136f0565b9750602089013596506040890135613a50816136f0565b955060608901359450613a6560808a01613705565b9350613a7360a08a01613705565b925060c0890135915060e089013590509295985092959890939650565b60008060008060808587031215613aa657600080fd5b8435613ab1816136f0565b9350602085013592506040850135613ac8816136f0565b9396929550929360600135925050565b600060608284031215613aea57600080fd5b50919050565b60008060008060008060c08789031215613b0957600080fd5b8635613b14816136f0565b95506020870135613b24816136f0565b94506040870135935060608701359250608087013567ffffffffffffffff811115613b4e57600080fd5b613b5a89828a01613ad8565b92505060a087013590509295509295509295565b60008060008060008060008060006101208a8c031215613b8d57600080fd5b8935613b98816136f0565b985060208a0135613ba8816136f0565b975060408a0135965060608a0135955060808a0135613bc6816136f0565b9450613bd460a08b01613705565b935060c08a0135925060e08a013591506101008a013590509295985092959850929598565b60008060208385031215613c0c57600080fd5b823567ffffffffffffffff811115613c2357600080fd5b613c2f858286016138c0565b90969095509350505050565b60008060408385031215613c4e57600080fd5b8235613c59816136f0565b91506020830135613847816136f0565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742061206e6f64652067726f7570000000000000604082015260600190565b6020808252601f908201527f416d6f756e74206d7573742062652067726561746572207468616e2066656500604082015260600190565b60208082526018908201527f4b6170706120697320616c72656164792070726573656e740000000000000000604082015260600190565b600060208284031215613d8157600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039890981688526020880196909652604087019490945260ff92831660608701529116608085015260a084015260c0830152151560e08201526101000190565b600060208284031215613dfa57600080fd5b8151612dfe816136f0565b8183526000602080850194508260005b85811015613e43578135613e28816136f0565b6001600160a01b031687529582019590820190600101613e15565b509495945050505050565b88815260018060a01b038816602082015286604082015260c060608201526000613e7c60c083018789613e05565b8281036080840152613e8f818688613e05565b9150508260a08301529998505050505050505050565b6020808252600e908201526d4e6f7420676f7665726e616e636560901b604082015260600190565b9687526001600160a01b03959095166020870152604086019390935260ff918216606086015216608084015260a083015260c082015260e00190565b6000808335601e19843603018112613f2057600080fd5b83018035915067ffffffffffffffff821115613f3b57600080fd5b6020019150600581901b360382131561390557600080fd5b60018060a01b038a16815288602082015287604082015260e060608201526000613f8160e08301888a613e05565b8281036080840152613f94818789613e05565b60a0840195909552505090151560c090910152979650505050505050565b6001600160a01b039790971687526020870195909552604086019390935260ff919091166060850152608084015260a0830152151560c082015260e00190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561403257614032614008565b5060010190565b6000821982111561404c5761404c614008565b500190565b60008282101561406357614063614008565b500390565b60005b8381101561408357818101518382015260200161406b565b83811115612ee85750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516140cc816017850160208801614068565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516140fd816028840160208801614068565b01602801949350505050565b6020815260008251806020840152614128816040850160208701614068565b601f01601f19169190910160400192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b88815287602082015260c0604082015260006141a760c08301888a613e05565b82810360608401526141ba818789613e05565b6001600160a01b03959095166080840152505060a001529695505050505050565b6000602082840312156141ed57600080fd5b81518015158114612dfe57600080fd5b600081600019048311821515161561421757614217614008565b500290565b634e487b7160e01b600052604160045260246000fd5b60008161424157614241614008565b506000190190565b6000825161425b818460208701614068565b919091019291505056fe71840dc4906352362b0cdaf79870196c8e42acafade72d5d5a6d59291253ceb14f56ec39e98539920503fd54ee56ae0cbebe9eb15aa778f18de67701eeae7c65b5c00e6706c3d213edd70ff33717fac657eacc5fe161f07180cf1fcab13cc4cda264697066735822122010bea104f9a73688483dcf9f3a9b9563e0008d032914936915e4c4d4e8a9faee64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(address,uint256,address,uint256)": {
        "params": {
          "amount": "Amount in native token decimals to transfer cross-chain pre-fees*",
          "chainId": "which chain to bridge assets onto",
          "to": "address on other chain to bridge assets to",
          "token": "ERC20 compatible token to deposit into the bridge"
        }
      },
      "depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)": {
        "params": {
          "amount": "Amount in native token decimals to transfer cross-chain pre-fees",
          "chainId": "which chain to bridge assets onto",
          "deadline": "latest timestamp to accept this transaction*",
          "minDy": "the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.",
          "to": "address on other chain to bridge assets to",
          "token": "ERC20 compatible token to deposit into the bridge",
          "tokenIndexFrom": "the token the user wants to swap from",
          "tokenIndexTo": "the token the user wants to swap to"
        }
      },
      "depositMax(address,uint256,address)": {
        "params": {
          "chainId": "which chain to bridge assets onto",
          "to": "address on other chain to bridge assets to",
          "token": "ERC20 compatible token to deposit into the bridge*"
        }
      },
      "depositMaxAndSwapV2(address,uint256,address,address[],address[],uint256)": {
        "params": {
          "chainId": "which chain to bridge assets onto",
          "to": "address on other chain to bridge assets to",
          "token": "ERC20 compatible token to deposit into the bridge*"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "mint(address,address,uint256,uint256,bytes32)": {
        "details": "This means the SynapseBridge.sol contract must have minter access to the token attempting to be minted",
        "params": {
          "amount": "Amount in native token decimals to transfer cross-chain post-fees",
          "fee": "Amount in native token decimals to save to the contract as fees",
          "kappa": "kappa*",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge"
        }
      },
      "mintAndSwap(address,address,uint256,uint256,address,uint8,uint8,uint256,uint256,bytes32)": {
        "details": "This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted",
        "params": {
          "amount": "Amount in native token decimals to transfer cross-chain post-fees",
          "deadline": "Epoch time of the deadline that the swap is allowed to be executed.",
          "fee": "Amount in native token decimals to save to the contract as fees",
          "kappa": "kappa*",
          "minDy": "Minumum amount (in final asset decimals) that must be swapped for, otherwise the user will receive the SynERC20.",
          "pool": "Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge",
          "tokenIndexFrom": "Index of the SynERC20 asset in the pool",
          "tokenIndexTo": "Index of the desired final asset"
        }
      },
      "mintAndSwapV2(address,address,uint256,uint256,(address[],address[],uint256),bytes32)": {
        "details": "This means the BridgeDeposit.sol contract must have minter access to the token attempting to be minted",
        "params": {
          "amount": "Amount in native token decimals to transfer cross-chain post-fees",
          "fee": "Amount in native token decimals to save to the contract as fees",
          "kappa": "kappa*",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "redeem(address,uint256,address,uint256)": {
        "params": {
          "amount": "Amount in native token decimals to transfer cross-chain pre-fees*",
          "chainId": "which underlying chain to bridge assets onto",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge"
        }
      },
      "redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)": {
        "params": {
          "amount": "Amount in native token decimals to transfer cross-chain pre-fees",
          "chainId": "which underlying chain to bridge assets onto",
          "swapDeadline": "Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token*",
          "swapMinAmount": "Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap",
          "swapTokenIndex": "Specifies which of the underlying LP assets the nodes should attempt to redeem for",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge"
        }
      },
      "redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)": {
        "params": {
          "amount": "Amount in native token decimals to transfer cross-chain pre-fees",
          "chainId": "which underlying chain to bridge assets onto",
          "deadline": "latest timestamp to accept this transaction*",
          "minDy": "the min amount the user would like to receive, or revert to only minting the SynERC20 token crosschain.",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge",
          "tokenIndexFrom": "the token the user wants to swap from",
          "tokenIndexTo": "the token the user wants to swap to"
        }
      },
      "redeemMax(address,uint256,address)": {
        "params": {
          "chainId": "which underlying chain to bridge assets onto",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge*"
        }
      },
      "redeemMaxAndSwapV2(address,uint256,address,address[],address[],uint256)": {
        "params": {
          "chainId": "which underlying chain to bridge assets onto",
          "to": "address on other chain to redeem underlying assets to",
          "token": "ERC20 compatible token to deposit into the bridge*"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdraw(address,address,uint256,uint256,bytes32)": {
        "params": {
          "amount": "Amount in native token decimals to withdraw",
          "fee": "Amount in native token decimals to save to the contract as fees",
          "kappa": "kappa*",
          "to": "address on chain to send underlying assets to",
          "token": "ERC20 compatible token to withdraw from the bridge"
        }
      },
      "withdrawAndRemove(address,address,uint256,uint256,address,uint8,uint256,uint256,bytes32)": {
        "params": {
          "amount": "Amount in native token decimals to withdraw",
          "fee": "Amount in native token decimals to save to the contract as fees",
          "kappa": "kappa*",
          "pool": "Destination chain's pool to use to swap SynERC20 -> Asset. The nodes determine this by using PoolConfig.sol.",
          "swapDeadline": "Specificies the deadline that the nodes are allowed to try to redeem/swap the LP token",
          "swapMinAmount": "Specifies the minimum amount of the underlying asset needed for the nodes to execute the redeem/swap",
          "swapTokenIndex": "Specifies which of the underlying LP assets the nodes should attempt to redeem for",
          "to": "address on chain to send underlying assets to",
          "token": "ERC20 compatible token to withdraw from the bridge"
        }
      },
      "withdrawAndSwapV2(address,address,uint256,uint256,(address[],address[],uint256),bytes32)": {
        "params": {
          "amount": "Amount in native token decimals to withdraw",
          "fee": "Amount in native token decimals to save to the contract as fees",
          "kappa": "kappa*",
          "to": "address on chain to send underlying assets to",
          "token": "ERC20 compatible token to withdraw from the bridge"
        }
      },
      "withdrawFees(address,address)": {
        "params": {
          "to": "Address to send the fees to",
          "token": "ERC20 token in which fees acccumulated to transfer"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(address,uint256,address,uint256)": {
        "notice": "Relays to nodes to transfers an ERC20 token cross-chain"
      },
      "depositAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)": {
        "notice": "Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user."
      },
      "depositMax(address,uint256,address)": {
        "notice": "Relays to nodes to transfers an ERC20 token cross-chain"
      },
      "depositMaxAndSwapV2(address,uint256,address,address[],address[],uint256)": {
        "notice": "Relays to nodes to both transfer an ERC20 token cross-chain, and then have the nodes execute a swap through a liquidity pool on behalf of the user."
      },
      "mint(address,address,uint256,uint256,bytes32)": {
        "notice": "Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to). This is called by the nodes after a TokenDepositV2 event is emitted."
      },
      "mintAndSwap(address,address,uint256,uint256,address,uint8,uint8,uint256,uint256,bytes32)": {
        "notice": "Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwap event is emitted."
      },
      "mintAndSwapV2(address,address,uint256,uint256,(address[],address[],uint256),bytes32)": {
        "notice": "Nodes call this function to mint a SynERC20 (or any asset that the bridge is given minter access to), and then attempt to swap the SynERC20 into the desired destination asset. This is called by the nodes after a TokenDepositAndSwapV2 event is emitted."
      },
      "redeem(address,uint256,address,uint256)": {
        "notice": "Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain"
      },
      "redeemAndRemove(address,uint256,address,uint256,uint8,uint256,uint256)": {
        "notice": "Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)"
      },
      "redeemAndSwap(address,uint256,address,uint256,uint8,uint8,uint256,uint256)": {
        "notice": "Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain. This function indicates to the nodes that they should attempt to redeem the LP token for the underlying assets (E.g \"swap\" out of the LP token)"
      },
      "redeemMax(address,uint256,address)": {
        "notice": "Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain"
      },
      "redeemMaxAndSwapV2(address,uint256,address,address[],address[],uint256)": {
        "notice": "Relays to nodes that (typically) a wrapped synAsset ERC20 token has been burned and the underlying needs to be redeeemed on the native chain"
      },
      "withdraw(address,address,uint256,uint256,bytes32)": {
        "notice": "Function to be called by the node group to withdraw the underlying assets from the contract"
      },
      "withdrawAndRemove(address,address,uint256,uint256,address,uint8,uint256,uint256,bytes32)": {
        "notice": "Function to be called by the node group to withdraw the underlying assets from the contract"
      },
      "withdrawAndSwapV2(address,address,uint256,uint256,(address[],address[],uint256),bytes32)": {
        "notice": "Function to be called by the node group to withdraw the underlying assets from the contract"
      },
      "withdrawFees(address,address)": {
        "notice": "withdraw specified ERC20 token fees to a given address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1982,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1985,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2508,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2757,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1614,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1609_storage)"
      },
      {
        "astId": 1901,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2176,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 2219,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2070,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 2161,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2905,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "fees",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2907,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "startBlockNumber",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 2912,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "chainGasAmount",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 2914,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "WETH_ADDRESS",
        "offset": 0,
        "slot": "254",
        "type": "t_address_payable"
      },
      {
        "astId": 2916,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "ROUTER",
        "offset": 0,
        "slot": "255",
        "type": "t_address"
      },
      {
        "astId": 2920,
        "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
        "label": "kappaMap",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1609_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1609_storage"
      },
      "t_struct(RoleData)1609_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 1606,
            "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1608,
            "contract": "contracts/bridge/SynapseBridge.sol:SynapseBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}